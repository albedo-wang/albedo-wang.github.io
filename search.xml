<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ch1 - Introduction</title>
      <link href="/posts/63db6594.html"/>
      <url>/posts/63db6594.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Philosophy-of-Data-Structure"><a href="#1-Philosophy-of-Data-Structure" class="headerlink" title="1 Philosophy of Data Structure"></a>1 Philosophy of Data Structure</h1><h2 id="1-1-Efficient-Programs"><a href="#1-1-Efficient-Programs" class="headerlink" title="1.1 Efficient Programs"></a>1.1 Efficient Programs</h2><blockquote><p>Program is the <font color="blue"> <strong>soul of a machine</strong> </font>.</p><p>To improve the efficiency of a program.</p><ul><li><strong>Shorter running time</strong></li><li><strong>Less memory</strong></li></ul></blockquote><h2 id="1-2-Data-Structure"><a href="#1-2-Data-Structure" class="headerlink" title="1.2 Data Structure"></a>1.2 Data Structure</h2><blockquote><p><font color="red"> <strong>Data Structure</strong> </font> is <font color="blue"> <strong>any data representation</strong> </font> and its associated <font color="blue"> <strong>operations</strong> </font>.</p><ul><li>Integer: Summation</li><li>String: Replace</li></ul></blockquote><h2 id="1-3-Philosophy"><a href="#1-3-Philosophy" class="headerlink" title="1.3 Philosophy"></a>1.3 Philosophy</h2><blockquote><p><strong>Data Structure Requires</strong></p><ul><li><font color="blue">Space</font> for each data item it stores</li><li><font color="blue">Time</font> to perform each basic operation</li><li><font color="blue">Programming effort</font></li></ul></blockquote><div class="tip warning"><p><strong>No data structure is better than another in all situations.</strong></p></div><h1 id="2-Abstract-Data-Types-and-Data-Structures"><a href="#2-Abstract-Data-Types-and-Data-Structures" class="headerlink" title="2 Abstract Data Types and Data Structures"></a>2 Abstract Data Types and Data Structures</h1><h2 id="2-1-Definition"><a href="#2-1-Definition" class="headerlink" title="2.1 Definition"></a>2.1 Definition</h2><blockquote><p><strong>Type</strong>: <font color="red">a collection of <strong>values</strong>.</font></p><ul><li><strong>e.g.:</strong></li><li>Boolean type: collection of true or false value</li><li>Integer type: collection of 1,2,3… value</li></ul><p><strong>Data type</strong> : <font color="red"><strong>a type and a collection of operations</strong> that manipulate the type. </font></p><ul><li><strong>e.g.:</strong>  Integer data type: Integer type and + - x ÷ operations…</li></ul><p><strong>Data Item</strong>: <font color="red">a piece of information of a record drawn from a data type. </font></p><ul><li><strong>A data item is said to be a member of a data type</strong></li><li><strong>e.g.:</strong> true or false: a piece of information from a Boolean type…</li></ul><p><strong>Atomic Data Type</strong>: <font color="red">contain <strong>no subparts</strong>.</font></p><ul><li><strong>e.g.:</strong> Integer, Boolean…</li></ul><p><strong>Structure Data Type</strong>: <font color="red">contain <strong>several pieces</strong></font></p><ul><li><strong>e.g.:</strong> Array, String…</li></ul><p><strong>Abstract Data Type</strong>: a definition for a data type solely in terms of <font color="red"><strong>a set of values and a set of operations on that data type</strong> </font>.</p><ul><li><strong>ADT operation is defined by its inputs and outputs</strong></li><li><strong>Hide implementation details (Encapsulation)</strong></li></ul><p><strong>Data Structure</strong>: <font color="red"><strong>the physical implementation of an ADT</strong></font></p><ul><li>Operations associated with the ADT are implemented by subroutines (functions)</li><li><strong>Usually refers to an organization for data in main memory</strong></li></ul><p><strong>File Structure</strong>: an organization for data on peripheral storage</p><ul><li><strong>e.g.:</strong> Disk drive…</li></ul></blockquote><h2 id="2-2-Logical-vs-Physical-Form"><a href="#2-2-Logical-vs-Physical-Form" class="headerlink" title="2.2 Logical vs Physical Form"></a>2.2 Logical vs Physical Form</h2><blockquote><p><font color="red"> <strong>Data items have both</strong> </font><br><strong>Logical Form</strong></p><ul><li>Definition of the data item within an ADT</li><li><strong>e.g.</strong> Integers in mathematical sense: +, -</li></ul><p><strong>Physical Form</strong></p><ul><li>Implementation of the data item within a data structure</li><li><strong>e.g.</strong> 16/32 bit integers: overflow</li></ul></blockquote><p><img src="https://cdn.staticaly.com/gh/albedo-wang/picgo@main/img/20230110172937.png" alt=""></p><h1 id="3-Problems-Algorithms-and-Programs"><a href="#3-Problems-Algorithms-and-Programs" class="headerlink" title="3 Problems, Algorithms and Programs"></a>3 Problems, Algorithms and Programs</h1>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签外挂</title>
      <link href="/posts/54667693.html"/>
      <url>/posts/54667693.html</url>
      
        <content type="html"><![CDATA[<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV Project2: Feature Detection and Matching</title>
      <link href="/posts/4140e37c.html"/>
      <url>/posts/4140e37c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h1><blockquote><p>​    This project contains the <strong>feature detection and matching two parts</strong>. My teammates deal with the first problem. The matching part is my task. </p><p>​    <strong>The feature detection need us to use the definition to solve it and do not be allowed to use the package function in third lib.</strong></p><p>​    So we start from the <strong>Harris corner detection.</strong> </p><p>​    Then use various feature descriptions:</p><ul><li><p>[x] <strong>Simple Description</strong></p></li><li><p>[x] <strong>MOPS (Multiscale Oriented Patches descriptor)</strong></p></li><li><p>[x] <strong>ORB (Oriented FAST and Rotated BRIEF)</strong></p></li><li>[ ] <strong>SIFT (Scale-invariant feature transform)</strong></li></ul><p>​    After the feature detection, it’s my work to solve the matching problem.</p></blockquote><h1 id="Feature-Detection"><a href="#Feature-Detection" class="headerlink" title="Feature Detection"></a>Feature Detection</h1><blockquote><p>​    <strong>This part is left for future edition. (Lazy man!)</strong></p></blockquote><h1 id="Feature-Matching"><a href="#Feature-Matching" class="headerlink" title="Feature Matching"></a>Feature Matching</h1><blockquote><p>​    Before matching, the choice of <strong>measurement between descriptors</strong> is of great significance.</p><p>​    A common method is to <strong>calculate the distance of two descriptors</strong>.</p></blockquote><h2 id="How-to-calculate-the-difference-of-two-descriptors"><a href="#How-to-calculate-the-difference-of-two-descriptors" class="headerlink" title="How to calculate the difference of two descriptors?"></a>How to calculate the difference of two descriptors?</h2><blockquote><ul><li>[ ] <strong>MAD Algorithm (Mean Absolute Differences):</strong></li></ul></blockquote><script type="math/tex; mode=display">D(i,j)=\frac{1}{M+N}\sum_{s=1}^M\sum_{t=1}^N|S(i+s-1,j+t-1)-T(s,t)|</script><blockquote><ul><li>[ ] <strong>SAD Algorithm (Sum of Absolute Differences):</strong></li></ul></blockquote><script type="math/tex; mode=display">D(i,j)=\sum_{s=1}^M\sum_{t=1}^N|S(i+s-1,j+t-1)-T(s,t)|</script><blockquote><ul><li>[x] <strong>SSD Algorithm (Sum of Squared Differences):</strong></li></ul></blockquote><script type="math/tex; mode=display">D(i,j)=\sum_{s=1}^M\sum_{t=1}^N|S(i+s-1,j+t-1)-T(s,t)|^2</script><blockquote><ul><li>[ ] <strong>MSD Algorithm (Mean Square Differences):</strong></li></ul></blockquote><script type="math/tex; mode=display">D(i,j)=\sum_{s=1}^M\sum_{t=1}^N|S(i+s-1,j+t-1)-T(s,t)|^2</script><blockquote><ul><li>[ ] <strong>NCC Algorithm (Normalized Cross Correlation):</strong></li></ul></blockquote><script type="math/tex; mode=display">R(i,j)=\frac{\sum_{s=1}^M\sum_{t=1}^N|S^{i,j}(s,t)-E^{i,j}(s,t)||T(s,t)-E(T)|}{\sqrt{\sum_{s=1}^M\sum_{t=1}^N[S^{i,j}(s,t)-E^{i,j}(s,t)]^2\sum_{s=1}^M\sum_{t=1}^N[T(s,t)-E(T)]^2}}</script><h2 id="Match-Policy"><a href="#Match-Policy" class="headerlink" title="Match Policy"></a>Match Policy</h2><h3 id="Descriptor-Distance-Matrix"><a href="#Descriptor-Distance-Matrix" class="headerlink" title="Descriptor Distance Matrix"></a>Descriptor Distance Matrix</h3><blockquote><p>​        For the convenience of the following algorithm, I first store all the distance between the two pictures’ descriptors in a so called Distance Matrix.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Calculate the ssd between the two picture&#x27;s descriptors list(stored the positions of descriptors)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssd_map</span>(<span class="params">des1, des2</span>):</span><br><span class="line">    m, n = <span class="built_in">len</span>(des1), <span class="built_in">len</span>(des2)</span><br><span class="line">    distance = np.zeros((m, n))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            distance[i][j] = np.<span class="built_in">sum</span>((des1[i] - des2[j]) ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> distance</span><br></pre></td></tr></table></figure><h3 id="Minimum-SSD-Match"><a href="#Minimum-SSD-Match" class="headerlink" title="Minimum SSD Match"></a>Minimum SSD Match</h3><blockquote><p>​        <strong>Function_name: ssd_double_check</strong></p><p>​        According to the SSD algorithm mentioned in 3.1 part, the match policy is to match the descriptor in one picture with the minimum distance descriptor from another picture.</p><p>​        <strong>It seems that this is the end of this part. But please think for a while.</strong> If just do the match policy from picture 1 to picture 2, the final outcome must be that all descriptors in picture 1 have the one so called matched descriptors in picture 2.</p><p>​        No matter the descriptors detected in two pictures having whatever quantitative relationship. <strong>The worst way for the match descriptors in picture 2 may have connect to more than one descriptor in picture 1. It is unreasonable.</strong></p><p>​        One way to avoid this problem is to <strong>do the match procedure twice from picture 1 to picture 2 and also for picture 2 to picture 1</strong>. If both check is the same match pair, the match is legal. Otherwise, the match outcome shall be abandoned.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The match policy is that the descriptor pair has the min ssd</span></span><br><span class="line"><span class="comment"># Also check in both picture&#x27;s descriptors</span></span><br><span class="line"><span class="comment"># Thus making sure that the match between the two picture&#x27;s descriptors is single mapping</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ssd_double_check</span>(<span class="params">des1, des2</span>):</span><br><span class="line">    match_des = []</span><br><span class="line">    dis_map = ssd_map(des1, des2)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(des1)):</span><br><span class="line">        <span class="comment"># Return the min ssd match index in descriptor2 of the descriptor1</span></span><br><span class="line">        min_2to1 = np.argmin(dis_map[i, :])</span><br><span class="line">        <span class="comment"># Return the min ssd match index in descriptor1 of the descriptor2</span></span><br><span class="line">        min_1to2 = np.argmin(dis_map[:, min_2to1])</span><br><span class="line">        <span class="comment"># Make sure the match is single mapping</span></span><br><span class="line">        <span class="keyword">if</span> min_1to2 == i:</span><br><span class="line">            match_des.append((i, min_2to1))</span><br><span class="line">    <span class="keyword">return</span> match_des</span><br></pre></td></tr></table></figure><h3 id="Ratio-SSD-match"><a href="#Ratio-SSD-match" class="headerlink" title="Ratio SSD match"></a>Ratio SSD match</h3><blockquote><p>​        <strong>Function_name:  ratio_test</strong><br>​        After do the minimum SSD match, one more supporting measure carried out. The minimum SSD should also satisfy <strong>that is smaller than a certain and appropriate ratio multiply the second minimum SSD.</strong></p></blockquote><center><img src = "https://cdn.staticaly.com/gh/albedo-wang/picgo@main/img/20230105135040.png" style = "zoom: 67%;" /></center><blockquote><p>​        Fixed threshold, nearest neighbor, and nearest neighbor distance ratio matching. At a fixed distance threshold (dashed circles), descriptor D<sub>A</sub> fails to match D<sub>B</sub> and D<sub>D</sub> incorrectly matches D<sub>C</sub> and D<sub>E</sub>. If we pick the nearest neighbor, D<sub>A</sub> correctly matches D<sub>B</sub> but D<sub>D</sub> incorrectly matches D<sub>C</sub>. Using nearest neighbor distance ratio (NNDR) matching, the small NNDR d<sub>1</sub> = d<sub>2</sub> correctly matches D<sub>A</sub> with D<sub>B</sub>, and the large NNDR d<sub>1</sub>‘ = d<sub>2</sub>‘ correctly rejects matches for D<sub>D</sub>.<br>​        <strong>The ratio is nearest neighbor distance ratio (NNDR):</strong></p><script type="math/tex; mode=display">NNDR = \frac{d_1}{d_2} = \frac{||D_A-D_B||}{||D_A-D_C||}</script><center>(d<sub>1</sub> - Nearest neighbor distance, d<sub>2</sub> - Next neighbor distance)</center><center>(D<sub>A</sub> - Goal Descriptor, D<sub>B</sub>, D<sub>C</sub> - The nearest two neighbors)</center><p>​        <strong>In the code part, the ratio set is 0.65.</strong> Due to the use of nearest neighbor distance and next neighbor distance, code part defines a ssd_map function to return all the distance between the descriptors in the given two pictures. It is convenient for the NNDR calculation and following comparing with the 0.65 for the reason that the nearest two distance can be easily obtained in the ssd_map.</p><p>​        Finally, the twice check should be carried out to make sure the match answer is appropriate.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The match policy is that the min1 ssd is smaller than a constant multiplies the min2 ssd</span></span><br><span class="line"><span class="comment"># Also check in both picture&#x27;s descriptors</span></span><br><span class="line"><span class="comment"># Thus making sure that the match between the two picture&#x27;s descriptors is single mapping</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ratio_test</span>(<span class="params">des1, des2</span>):</span><br><span class="line">    match_des = []</span><br><span class="line">    dis_map = ssd_map(des1, des2)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(des1)):</span><br><span class="line">        sort_dis1 = np.sort(dis_map[i, :])</span><br><span class="line">        <span class="comment"># Get the min1 and min2 ssd</span></span><br><span class="line">        min11, min12 = sort_dis1[<span class="number">0</span>], sort_dis1[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># Get the min ssd index in descriptors2 to descriptors1</span></span><br><span class="line">        min_2to1 = np.argmin(dis_map[i, :])</span><br><span class="line">        <span class="comment"># The ratio set is 0.65 and check in two direction</span></span><br><span class="line">        <span class="keyword">if</span> min11 &lt;= <span class="number">0.65</span> * min12:</span><br><span class="line">            sort_dis2 = np.sort(dis_map[:, min_2to1])</span><br><span class="line">            min21, min22 = sort_dis2[<span class="number">0</span>], sort_dis2[<span class="number">1</span>]</span><br><span class="line">            min_1to2 = np.argmin(dis_map[:, min_2to1])</span><br><span class="line">            <span class="comment"># Check twice in two direction to make sure the match is best between two descriptors</span></span><br><span class="line">            <span class="keyword">if</span> min21 &lt;= <span class="number">0.65</span> * min22 <span class="keyword">and</span> min_1to2 == i:</span><br><span class="line">                match_des.append((i, min_2to1))</span><br><span class="line">    <span class="keyword">return</span> match_des</span><br></pre></td></tr></table></figure><h3 id="Draw-Match"><a href="#Draw-Match" class="headerlink" title="Draw Match"></a>Draw Match</h3><blockquote><p>​        <strong>Function_name:  draw_match_simple, draw_match_mops.</strong></p><p>​        First, it is obvious that those three descriptor methods are different with each other. So the descriptor drawing has to be consider in three case. Simple descriptors can be draw with cv2.rectangle function. While MOPS descriptors are a bit more difficult due to the rotated rectangle. Noticing that no build-in function in cv2 lib, one simplest method to draw is to get the four points to draw line one by one.</p><p>​        In the code part, the return value from MOPSdescriptor function are the descriptor intensity and angles of them. According to the math transformation, it is easy to gain the position of the four points (var_name: coord1, coord2, coor3, coor4).</p><p>​        Besides, for the matched descriptors in two pictures, the color of the rectangle is red. Nonmatched is blue. Thus, it is apparent to see the match result.</p></blockquote><p>PS：<strong>The following code may be so funny.</strong> I don’t use the square method to draw and do it by lines’ connection.</p><p>​        In that time, I search that <strong>there is no existing method</strong> to draw a <strong>rotated square zoom</strong> in the picture.</p><p>​        ==<strong>(Perhaps there is the method for now or you are clever to solve the problem in a simple way.)</strong>==</p><p>​        So, I typed the following <strong>stupid code</strong> and submitted.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Draw match outcome part</span></span><br><span class="line"><span class="comment"># Get the match index pairs earlier returned</span></span><br><span class="line"><span class="comment"># Do the picture stitching</span></span><br><span class="line"><span class="comment"># Draw descriptors and the line to connect the matched descriptors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_match_simple</span>(<span class="params">img1, img2, kps1, kps2, <span class="keyword">match</span></span>):</span><br><span class="line">    im_1 = cv2.imread(img1)</span><br><span class="line">    im_2 = cv2.imread(img2)</span><br><span class="line">    h1, w1, c1 = np.shape(im_1)</span><br><span class="line">    h2, w2, c2 = np.shape(im_2)</span><br><span class="line">    <span class="comment"># picture stitching</span></span><br><span class="line">    compose = np.zeros((h1, w1 + w2, <span class="number">3</span>))</span><br><span class="line">    compose[<span class="number">0</span>:h1, <span class="number">0</span>:w1, :] = im_1</span><br><span class="line">    compose[<span class="number">0</span>:h1, w1:w1 + w2, :] = im_2</span><br><span class="line">    compose = compose.astype(np.uint8)</span><br><span class="line">    <span class="comment"># draw descriptors and match lines</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(kps1)):</span><br><span class="line">        kp1_y, kp1_x = kps1[j]</span><br><span class="line">        cv2.rectangle(compose, (kp1_x - <span class="number">2</span>, kp1_y - <span class="number">2</span>), (kp1_x + <span class="number">2</span>, kp1_y + <span class="number">2</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(kps2)):</span><br><span class="line">        kp2_y, kp2_x = kps2[k]</span><br><span class="line">        cv2.rectangle(compose, (kp2_x - <span class="number">2</span> + w1, kp2_y - <span class="number">2</span>), (kp2_x + <span class="number">2</span> + w1, kp2_y + <span class="number">2</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="keyword">match</span>)):</span><br><span class="line">        kp1_idx, kp2_idx = <span class="keyword">match</span>[i]</span><br><span class="line">        kp1_y, kp1_x = kps1[kp1_idx]</span><br><span class="line">        kp2_y, kp2_x = kps2[kp2_idx]</span><br><span class="line">        cv2.rectangle(compose, (kp1_x - <span class="number">2</span>, kp1_y - <span class="number">2</span>), (kp1_x + <span class="number">2</span>, kp1_y + <span class="number">2</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.rectangle(compose, (kp2_x - <span class="number">2</span> + w1, kp2_y - <span class="number">2</span>), (kp2_x + <span class="number">2</span> + w1, kp2_y + <span class="number">2</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, (kp1_x, kp1_y), (kp2_x + w1, kp2_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;match_img&#x27;</span>, compose)</span><br><span class="line">    name = <span class="string">&#x27;Match_Time_&#x27;</span> + time.strftime(<span class="string">&#x27;%H-%M-%S&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    cv2.imwrite(name, compose)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_match_mops</span>(<span class="params">img1, img2, kps1, kps2, <span class="keyword">match</span>, angle1, angle2</span>):</span><br><span class="line">    im_1 = cv2.imread(img1)</span><br><span class="line">    im_2 = cv2.imread(img2)</span><br><span class="line">    h1, w1, c1 = np.shape(im_1)</span><br><span class="line">    h2, w2, c2 = np.shape(im_2)</span><br><span class="line">    <span class="comment"># picture stitching</span></span><br><span class="line">    compose = np.zeros((h1, w1 + w2, <span class="number">3</span>))</span><br><span class="line">    compose[<span class="number">0</span>:h1, <span class="number">0</span>:w1, :] = im_1</span><br><span class="line">    compose[<span class="number">0</span>:h1, w1:w1 + w2, :] = im_2</span><br><span class="line">    compose = compose.astype(np.uint8)</span><br><span class="line">    <span class="comment"># draw descriptors and match lines</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(kps1)):</span><br><span class="line">        kp1_y, kp1_x = kps1[j]</span><br><span class="line">        coord1 = (kp1_x - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord2 = (kp1_x - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord3 = (kp1_x + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord4 = (kp1_x + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[j] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        cv2.line(compose, coord1, coord2, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord2, coord3, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord3, coord4, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord4, coord1, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(kps2)):</span><br><span class="line">        kp2_y, kp2_x = kps2[k]</span><br><span class="line">        coord1 = (kp2_x - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord2 = (kp2_x - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord3 = (kp2_x + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord4 = (kp2_x + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[k] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        cv2.line(compose, coord1, coord2, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord2, coord3, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord3, coord4, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord4, coord1, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="keyword">match</span>)):</span><br><span class="line">        kp1_idx, kp2_idx = <span class="keyword">match</span>[i]</span><br><span class="line">        kp1_y, kp1_x = kps1[kp1_idx]</span><br><span class="line">        kp2_y, kp2_x = kps2[kp2_idx]</span><br><span class="line">        coord1 = (kp1_x - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord2 = (kp1_x - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord3 = (kp1_x + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord4 = (kp1_x + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)), kp1_y + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle1[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        cv2.line(compose, coord1, coord2, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord2, coord3, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord3, coord4, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord4, coord1, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        coord1 = (kp2_x - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord2 = (kp2_x - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y - <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord3 = (kp2_x + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y - <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        coord4 = (kp2_x + <span class="built_in">int</span>(<span class="number">5</span> * math.sin((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)) + w1, kp2_y + <span class="built_in">int</span>(<span class="number">5</span> * math.cos((angle2[i] - <span class="number">45</span>)/<span class="number">180</span>)))</span><br><span class="line">        cv2.line(compose, coord1, coord2, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord2, coord3, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord3, coord4, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, coord4, coord1, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.line(compose, (kp1_x, kp1_y), (kp2_x + w1, kp2_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;match_img&#x27;</span>, compose)</span><br><span class="line">    name = <span class="string">&#x27;Match_Time_&#x27;</span> + time.strftime(<span class="string">&#x27;%H-%M-%S&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    cv2.imwrite(name, compose)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV Project1: Hybrid Image</title>
      <link href="/posts/3c60861f.html"/>
      <url>/posts/3c60861f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>​        The goal of this assignment is to write an image filtering function and use it to create hybrid images. Hybrid images are static images that change in interpretation as a function of the viewing distance. The basic idea is that high frequency tends to dominate perception when it is available, but, at a distance, only the low frequency (smooth) part of the signal can be seen. By blending the high frequency portion of one image with the low-frequency portion of another, you get a hybrid image that leads to different interpretations at different distances. You will use your own solution to create your own hybrid images.</p><h1 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h1><h2 id="cross-correlation-2d"><a href="#cross-correlation-2d" class="headerlink" title="cross_correlation_2d"></a>cross_correlation_2d</h2><p>​            Realize the math function of cross correlation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_correlation_2d</span>(<span class="params">kernel, img</span>):</span><br><span class="line">    m, n = np.shape(kernel)</span><br><span class="line">    row, col = np.shape(img)</span><br><span class="line">    pad_num = m // <span class="number">2</span></span><br><span class="line">    ans = np.zeros((row-<span class="number">2</span>*pad_num, col-<span class="number">2</span>*pad_num))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pad_num, row-pad_num):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pad_num, col-pad_num):</span><br><span class="line">            cal_matrix = img[i-pad_num:i+pad_num+<span class="number">1</span>, j-pad_num:j+pad_num+<span class="number">1</span>]</span><br><span class="line">            dot_ans = np.multiply(kernel, cal_matrix)</span><br><span class="line">            ans[i-pad_num][j-pad_num] = dot_ans.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="convolve-2d"><a href="#convolve-2d" class="headerlink" title="convolve_2d"></a>convolve_2d</h2><p>​            Realize the math function of convolution.</p><p>​            One simple but maybe cost much way is to turn the kernel element in inverse order</p><p>​            then use the cross_correlation_2d function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convolve_2d</span>(<span class="params">kernel, img</span>):</span><br><span class="line">    m, n = np.shape(kernel)</span><br><span class="line">    convolve_kernel = np.zeros((m, n))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            convolve_kernel[i][j] = kernel[m-i-<span class="number">1</span>][n-j-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> cross_correlation_2d(convolve_kernel, img)</span><br></pre></td></tr></table></figure><h2 id="gaussian-blur-kernel-2d"><a href="#gaussian-blur-kernel-2d" class="headerlink" title="gaussian_blur_kernel_2d"></a>gaussian_blur_kernel_2d</h2><blockquote><p>Generate a 2 dimension gaussian blur kernel.</p><p>One way is to use the math lib and do the calculation of gaussian distribution (The below code is this way).</p><p>Another better way is to use cv2.getGaussianKernel() to generate a 1 dimension vector, then do the vector multiplication to get a 2 dimension kernel.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gaussian_blur_kernel_2d</span>(<span class="params">n, sigma</span>):  <span class="comment"># n kernel size</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Please enter a odd number for the gaussian filter!&quot;</span>)  </span><br><span class="line">        <span class="comment"># Here is a error warning set by myself to make sure that can remind me of the kernel size is odd!</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp_kernel = np.zeros((n, n))</span><br><span class="line">        center = n // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                temp_kernel[i][j] = math.exp(-((i - center + <span class="number">1</span>) ** <span class="number">2</span> + (j - center + <span class="number">1</span>) ** <span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line">        kernel = temp_kernel / temp_kernel.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">return</span> kernel</span><br></pre></td></tr></table></figure><h2 id="low-pass"><a href="#low-pass" class="headerlink" title="low_pass"></a>low_pass</h2><blockquote><p>Use the gaussian kernel to do the convolution, then get the low pass frequency image.</p><p>First, divide the r,g,b channels. </p><p>Then, use the pad function to pad image. </p><p>After, do the convolution. </p><p>Finally, merge them in one RGB image.</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">low_pass</span>(<span class="params">img1, n, sigma</span>):  <span class="comment">#img1: input image, n: kernel size, sigma: gaussian kernel sigma</span></span><br><span class="line">    img = cv2.imread(img1)</span><br><span class="line">    b, g, r = cv2.split(img)</span><br><span class="line">    pad_num = n // <span class="number">2</span></span><br><span class="line">    kernel = gaussian_blur_kernel_2d(n, sigma)</span><br><span class="line">    padded_b = np.pad(b, ((pad_num, pad_num), (pad_num, pad_num)), <span class="string">&#x27;constant&#x27;</span>)</span><br><span class="line">    padded_g = np.pad(g, ((pad_num, pad_num), (pad_num, pad_num)), <span class="string">&#x27;constant&#x27;</span>)</span><br><span class="line">    padded_r = np.pad(r, ((pad_num, pad_num), (pad_num, pad_num)), <span class="string">&#x27;constant&#x27;</span>)</span><br><span class="line">    b = convolve_2d(kernel, padded_b)</span><br><span class="line">    g = convolve_2d(kernel, padded_g)</span><br><span class="line">    r = convolve_2d(kernel, padded_r)</span><br><span class="line">    low_pass_img = cv2.merge([b, g, r])</span><br><span class="line">    <span class="keyword">return</span> low_pass_img.astype(np.uint8)</span><br><span class="line">    <span class="comment"># np.uint8 make sure all the convolution element is integer number!</span></span><br></pre></td></tr></table></figure><h2 id="high-pass"><a href="#high-pass" class="headerlink" title="high_pass"></a>high_pass</h2><blockquote><p>Use the low pass image of the last function return. Then, do the subtraction to get the high pass image.</p><p>First, divide the r,g,b channels. </p><p>Then, use the pad function to pad image. </p><p>After, do the convolution. </p><p>Finally, merge them in one RGB image</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">high_pass</span>(<span class="params">img2, n, sigma</span>): <span class="comment">#img2: input image, n: kernel size, sigma: gaussian kernel sigma</span></span><br><span class="line">    blur_img = low_pass(img2, n, sigma)</span><br><span class="line">    img = cv2.imread(img2)</span><br><span class="line">    high_pass_img = img - blur_img + <span class="number">128</span></span><br><span class="line">    <span class="keyword">return</span> high_pass_img</span><br><span class="line">    <span class="comment"># Due to the low pass image is 0-255 integer, this return do not need the np.uint8!</span></span><br></pre></td></tr></table></figure><h2 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h2><blockquote><p>Use the low pass image and high pass image. </p><p>Then, according to the setted Mix-in ratio to combine them.</p><p>The original function of hybrid (Don’t append any other method).</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hybrid</span>(<span class="params">img1, img2, n, sigma, alpha</span>):</span><br><span class="line">    <span class="comment">#img1: left image(low pass frequency), img2: right image(high pass frequency), alpha: Mix-in ratio</span></span><br><span class="line">    low_pass_img = low_pass(img1, n, sigma)</span><br><span class="line">    high_pass_img = high_pass(img2, n, sigma)</span><br><span class="line">    hybrid_img = alpha * low_pass_img + (<span class="number">1</span> - alpha) * high_pass_img</span><br><span class="line">    hybrid_img = hybrid_img.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> hybrid_img</span><br></pre></td></tr></table></figure><blockquote><p>Use the global equalizehist.</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hybrid</span>(<span class="params">img1, img2, n, sigma, alpha</span>):</span><br><span class="line">    <span class="comment">#img1: left image(low pass frequency), img2: right image(high pass frequency), alpha: Mix-in ratio</span></span><br><span class="line">    low_pass_img = low_pass(img1, n, sigma)</span><br><span class="line">    high_pass_img = high_pass(img2, n, sigma)</span><br><span class="line">    hybrid_img = alpha * low_pass_img + (<span class="number">1</span> - alpha) * high_pass_img</span><br><span class="line">    hybrid_img = hybrid_img.astype(np.uint8)</span><br><span class="line">    b, g, r = cv2.split(hybrid_img)</span><br><span class="line">    global_hist_b = cv2.equalizeHist(b)</span><br><span class="line">    global_hist_g = cv2.equalizeHist(g)</span><br><span class="line">    global_hist_r = cv2.equalizeHist(r)</span><br><span class="line">    <span class="keyword">return</span> cv2.merge([global_hist_b, global_hist_g, global_hist_r])</span><br></pre></td></tr></table></figure><blockquote><p>Use the local equlizehist.</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hybrid</span>(<span class="params">img1, img2, n, sigma, alpha</span>):</span><br><span class="line">    <span class="comment">#img1: left image(low pass frequency), img2: right image(high pass frequency), alpha: Mix-in ratio</span></span><br><span class="line">    low_pass_img = low_pass(img1, n, sigma)</span><br><span class="line">    high_pass_img = high_pass(img2, n, sigma)</span><br><span class="line">    hybrid_img = alpha * low_pass_img + (<span class="number">1</span> - alpha) * high_pass_img</span><br><span class="line">    hybrid_img = hybrid_img.astype(np.uint8)</span><br><span class="line">    b, g, r = cv2.split(hybrid_img)</span><br><span class="line">    clahe = cv2.createCLAHE(<span class="number">1.5</span>, (<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    local_hist_b = clahe.apply(b)</span><br><span class="line">    local_hist_g = clahe.apply(g)</span><br><span class="line">    local_hist_r = clahe.apply(r)</span><br><span class="line">    <span class="keyword">return</span> cv2.merge([local_hist_b, local_hist_g, local_hist_r])</span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hybrid_ans = hybrid(<span class="string">&#x27;left.jpg&#x27;</span>, <span class="string">&#x27;right.jpg&#x27;</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">0.6</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;hybrid.jpg&#x27;</span>, hybrid_ans)</span><br><span class="line">left_img = cv2.imread(<span class="string">&#x27;left.jpg&#x27;</span>)</span><br><span class="line">right_img = cv2.imread(<span class="string">&#x27;right.jpg&#x27;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Left Image&#x27;</span>, left_img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Right Image&#x27;</span>, right_img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Hybrid Image&#x27;</span>, hybrid_ans)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>No operation (Original hybrid image).</p><blockquote><p><img src="https://cdn.staticaly.com/gh/albedo-wang/picgo@main/img/Original%20Image.png" alt="Original Image"></p></blockquote><p>Global equalize-hist.</p><blockquote><p><img src="https://cdn.staticaly.com/gh/albedo-wang/picgo@main/img/Global%20Hist%20Image.png" alt="Global Hist Image"></p></blockquote><p>Local equalize-hist.</p><blockquote><p><img src="https://cdn.staticaly.com/gh/albedo-wang/picgo@main/img/Local%20Hist%20Image.png" alt="Local Hist Image"></p></blockquote><p>​        Compare the above three images, we can find that the local equalize-hist is the best! Original one and the global equalize-hist one are extreme in the contrast ratio.</p><p>​        So, the final code choose the local equalize-hist method.</p>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初来乍到</title>
      <link href="/posts/a28d2e0f.html"/>
      <url>/posts/a28d2e0f.html</url>
      
        <content type="html"><![CDATA[<div class="tip bolt"><p>“欲买桂花同载酒，终不似，少年游. ”</p></div>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小纸条 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"望秋弥茂の妙妙屋","short_name":"望秋弥茂","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a><center>关于作者</center></h2><h3 id="🐕-00后，末流酒吧舞机器人工程本科在读，WUSIE-Lychee-Lab臭弟弟"><a href="#🐕-00后，末流酒吧舞机器人工程本科在读，WUSIE-Lychee-Lab臭弟弟" class="headerlink" title="🐕 00后，末流酒吧舞机器人工程本科在读，WUSIE Lychee Lab臭弟弟"></a><center>🐕 00后，末流酒吧舞机器人工程本科在读，WUSIE Lychee Lab臭弟弟</center></h3><h4 id="📚-SIAT先进院自动驾驶组暑期学习Ended"><a href="#📚-SIAT先进院自动驾驶组暑期学习Ended" class="headerlink" title="📚 SIAT先进院自动驾驶组暑期学习Ended"></a><center>📚 SIAT先进院自动驾驶组暑期学习Ended<center></h4><h4 id="🐡-三天打鱼两天晒网"><a href="#🐡-三天打鱼两天晒网" class="headerlink" title="🐡 三天打鱼两天晒网"></a><center>🐡 三天打鱼两天晒网</center></h4><h3 id="⚙️-研究方向很杂：联邦学习，计算机视觉以及机器人感知"><a href="#⚙️-研究方向很杂：联邦学习，计算机视觉以及机器人感知" class="headerlink" title="⚙️ 研究方向很杂：联邦学习，计算机视觉以及机器人感知"></a><center>⚙️ 研究方向很杂：联邦学习，计算机视觉以及机器人感知</center></h3><h3 id="✒️-随意写点东西"><a href="#✒️-随意写点东西" class="headerlink" title="✒️ 随意写点东西"></a><center>✒️ 随意写点东西</center></h3><h3 id="🤖-梦想是成为野生钢铁侠！"><a href="#🤖-梦想是成为野生钢铁侠！" class="headerlink" title="🤖 梦想是成为野生钢铁侠！"></a><center>🤖 梦想是成为野生钢铁侠！</center></h3><h4 id="🤣-2-5次元生物"><a href="#🤣-2-5次元生物" class="headerlink" title="🤣 2.5次元生物"></a><center>🤣 2.5次元生物</center></h4><hr><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a><center>联系方式</center></h2><h4 id=""><a href="#" class="headerlink" title=""></a><div class="tip home"><center>📮 Email: wangzihan-0705@qq.com</center></div></h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="tip sync"><center>🐳 Github: https://github.com/albedo-wang</center></div></h4>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>归档</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 颜色 */:root {  --anzhiyu-theme-op: #4259ef23;  --anzhiyu-gray-op: #9999992b;  --anzhiyu-theme-top: var(--anzhiyu-theme);  --anzhiyu-white: #fff;  --anzhiyu-white-op: rgba(255, 255, 255, 0.2);  --anzhiyu-black: #000;  --anzhiyu-black-op: rgba(0, 0, 0, 0.2);  --anzhiyu-none: rgba(0, 0, 0, 0);  --anzhiyu-gray: #999999;  --anzhiyu-yellow: #ffc93e;  --anzhiyu-border-radius: 8px;  --anzhiyu-main: var(--anzhiyu-theme);  --anzhiyu-main-op: var(--anzhiyu-theme-op);  --anzhiyu-shadow-theme: 0 8px 12px -3px var(--anzhiyu-theme-op);  --anzhiyu-shadow-main: 0 8px 12px -3px var(--anzhiyu-main-op);  --anzhiyu-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2);  --anzhiyu-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2);  --anzhiyu-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05);  --anzhiyu-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12);  --anzhiyu-shadow-red: 0 8px 12px -3px #ee7d7936;  --anzhiyu-shadow-green: 0 8px 12px -3px #87ee7936;  --anzhiyu-shadow-border: 0 8px 16px -4px #2c2d300c;  --anzhiyu-shadow-blackdeep: 0 2px 16px -3px rgba(0, 0, 0, 0.15);  --anzhiyu-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%);  --style-border: 1px solid var(--anzhiyu-card-border);  --anzhiyu-blue-main: #3b70fc;  --style-border-hover: 1px solid var(--anzhiyu-main);  --style-border-dashed: 1px dashed var(--anzhiyu-theme-op);  --style-border-avatar: 4px solid var(--anzhiyu-background);  --style-border-always: 1px solid var(--anzhiyu-card-border);  --anzhiyu-white-acrylic1: #fefeff !important;  --anzhiyu-white-acrylic2: #fcfdff !important;  --anzhiyu-black-acrylic2: #08080a !important;  --anzhiyu-black-acrylic1: #0b0b0e !important;  --anzhiyu-main-none: #b8b8b800 !important;}[data-theme="light"] {  --anzhiyu-theme: #3b70fc;  --anzhiyu-theme-op: #4259ef23;  --anzhiyu-blue: #3b70fc;  --anzhiyu-red: #d8213c;  --anzhiyu-pink: #ff7c7c;  --anzhiyu-green: #57bd6a;  --anzhiyu-fontcolor: #363636;  --anzhiyu-background: #f7f9fe;  --anzhiyu-reverse: #000;  --anzhiyu-maskbg: rgba(255, 255, 255, 0.6);  --anzhiyu-maskbgdeep: rgba(255, 255, 255, 0.85);  --anzhiyu-hovertext: var(--anzhiyu-theme);  --anzhiyu-ahoverbg: #f7f7fa;  --anzhiyu-lighttext: var(--anzhiyu-main);  --anzhiyu-secondtext: rgba(60, 60, 67, 0.6);  --anzhiyu-scrollbar: rgba(60, 60, 67, 0.4);  --anzhiyu-card-btn-bg: #edf0f7;  --anzhiyu-post-blockquote-bg: #fafcff;  --anzhiyu-post-tabs-bg: #f2f5f8;  --anzhiyu-secondbg: #edf0f7;  --anzhiyu-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);  --anzhiyu-card-bg: #fff;  --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-card-border: #c0c6d8;}[data-theme="dark"] {  --global-bg: #191919;  --anzhiyu-theme: #0084ff;  --anzhiyu-theme-op: #0084ff23;  --anzhiyu-blue: #0084ff;  --anzhiyu-red: #ff3842;  --anzhiyu-pink: #ff7c7c;  --anzhiyu-green: #57bd6a;  --anzhiyu-fontcolor: #f7f7fa;  --anzhiyu-background: #18171d;  --anzhiyu-reverse: #fff;  --anzhiyu-maskbg: rgba(0, 0, 0, 0.6);  --anzhiyu-maskbgdeep: rgba(0, 0, 0, 0.85);  --anzhiyu-hovertext: #0a84ff;  --anzhiyu-ahoverbg: #fff;  --anzhiyu-lighttext: #f2b94b;  --anzhiyu-secondtext: #a1a2b8;  --anzhiyu-scrollbar: rgba(200, 200, 223, 0.4);  --anzhiyu-card-btn-bg: #30343f;  --anzhiyu-post-blockquote-bg: #000;  --anzhiyu-post-tabs-bg: #121212;  --anzhiyu-secondbg: #30343f;  --anzhiyu-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4);  --anzhiyu-card-bg: #1d1b26;  --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-card-border: #42444a;}/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf  https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(/font/AaLan.ttf);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }    /* 页脚透明 */  #footer {    background: #EFC19B;    opacity: calc(80%);  }  /* 头图透明 */  #page-header {    background: #EFC19B;    opacity: calc(80%);  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #eaec76;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/profball.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/fight.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /*加载条*/  .pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 20rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;  }    .pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;  }    .pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;  }    .pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;  }  @keyframes gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  /* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}#aside-content .aside-list > .aside-list-item .content > time {  display: none;}#aside-content .aside-list > .aside-list-item .content > .title {  -webkit-line-clamp: 3;  font-weight: 700;  padding: 2px 0;}#aside-content .aside-list > .aside-list-item {  padding: 8px;  padding-top: 6px !important;  padding-bottom: 6px !important;  border-radius: 12px;  transition: 0.3s;  margin: 4px 0;  cursor: pointer;}@media screen and (min-width: 1300px) {  #aside-content .aside-list > .aside-list-item:hover {    transform: scale(1.03);  }  #aside-content .aside-list > .aside-list-item:active {    transform: scale(0.97);  }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {  transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {  border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {  border-radius: 8px;  border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {  background: var(--anzhiyu-blue-main);  color: var(--anzhiyu-white);  transition: 0.3s;  box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {  color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {  padding: 0.4rem 0.6rem !important;}/* 侧边栏卡片 */#aside-content > .card-widget.card-info {  background: linear-gradient(-45deg, var(--anzhiyu-main), #cfa96b, #c3d05e, #68a8dd);  background-size: 400%;  box-shadow: var(--anzhiyu-shadow-black);  animation: gradient 15s ease infinite;  position: relative;  color: var(--anzhiyu-white);}.site-data > a .headline,.site-data > a .length-num {  color: var(--anzhiyu-white);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友人A</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">此间</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://akilar.top/" title="Akilarの糖果屋" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Akilarの糖果屋" />              </div>              <div class="flink-item-name">Akilarの糖果屋</div>               <div class="flink-item-desc" title="欢迎光临糖果屋">欢迎光临糖果屋</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://anzhiy.cn/" title="安知鱼`Blog" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://img02.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼`Blog" />              </div>              <div class="flink-item-name">安知鱼`Blog</div>               <div class="flink-item-desc" title="生活明朗，万物可爱">生活明朗，万物可爱</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.fomal.cc/" title="Fomalhaut🥝" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.fomal.cc/assets/avatar.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Fomalhaut🥝" />              </div>              <div class="flink-item-name">Fomalhaut🥝</div>               <div class="flink-item-desc" title="Future is now 🍭🍭🍭">Future is now 🍭🍭🍭</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日畢">今日事,今日畢</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网站框架">快速、简单且强大的网站框架</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">彼方</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/" title="BiliBili" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="/img/siteicon/bilibili.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="BiliBili" />              </div>              <div class="flink-item-name">BiliBili</div>               <div class="flink-item-desc" title="2.5次元的世界">2.5次元的世界</div>            </a>          </div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "┭┮﹏┭┮ ballball你了，看看我呀！";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "(●'◡'●) 欢迎肥来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_3611233='<svg><symbol id="icon-shijuezhineng" viewBox="0 0 1024 1024"><path d="M522.88 321.28c-146.56 0-264.96 183.68-264.96 183.68s119.04 165.76 264.96 165.76 264.96-165.76 264.96-165.76-118.4-183.68-264.96-183.68z" fill="#E8E6FF" ></path><path d="M522.88 682.88c-62.72 0-130.56-29.44-195.84-85.76-48.64-42.24-78.72-83.2-80-85.12-3.2-4.48-3.2-10.24-0.64-14.72 1.28-1.92 31.36-47.36 79.36-94.08 65.28-62.08 133.12-95.36 196.48-95.36s131.2 32.64 196.48 95.36c48.64 46.08 78.08 92.16 79.36 94.08 2.56 4.48 2.56 10.24-0.64 14.72-1.28 1.92-31.36 42.88-80 85.12-63.36 56.32-131.2 85.76-194.56 85.76zM273.92 504.32c24.32 30.72 128 152.96 249.6 152.96s225.28-122.24 249.6-152.96c-23.68-33.28-128-170.24-249.6-170.24-122.24 0-225.92 136.32-249.6 170.24z" fill="#708DB7" ></path><path d="M592 562.56c-17.92 17.92-41.6 27.52-67.2 27.52s-49.28-9.6-67.2-27.52-27.52-41.6-27.52-67.2 9.6-49.28 27.52-67.2S499.2 400.64 524.8 400.64s49.28 9.6 67.2 27.52 27.52 41.6 27.52 67.2-9.6 49.28-27.52 67.2z" fill="#FFF27D" ></path><path d="M524.8 603.52c-28.8 0-55.68-11.52-76.16-31.36-20.48-20.48-31.36-47.36-31.36-76.16s11.52-55.68 31.36-76.16c20.48-20.48 47.36-31.36 76.16-31.36s55.68 11.52 76.16 31.36c20.48 20.48 31.36 47.36 31.36 76.16s-11.52 55.68-31.36 76.16c-20.48 19.84-47.36 31.36-76.16 31.36z m0-190.08c-21.76 0-42.24 8.32-58.24 24.32-15.36 15.36-24.32 35.84-24.32 58.24 0 21.76 8.32 42.24 24.32 58.24 15.36 15.36 35.84 24.32 58.24 24.32s42.24-8.32 58.24-24.32c15.36-15.36 24.32-35.84 24.32-58.24 0-21.76-8.32-42.24-24.32-58.24-15.36-15.36-36.48-24.32-58.24-24.32zM518.4 249.6h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M531.84 261.12c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM396.8 192h25.6v172.8h-25.6z" fill="#708DB7" ></path><path d="M410.24 216.32c-26.88 0-49.28-21.76-49.28-49.28s21.76-49.28 49.28-49.28 49.28 21.76 49.28 49.28-22.4 49.28-49.28 49.28z m0-72.96c-12.8 0-23.68 10.88-23.68 23.68s10.88 23.68 23.68 23.68 23.68-10.88 23.68-23.68-10.88-23.68-23.68-23.68zM646.4 352h-25.6V172.8h185.6v25.6h-160z" fill="#708DB7" ></path><path d="M634.24 192.64m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M634.24 229.12c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM832.64 235.52c-26.88 0-49.28-21.76-49.28-49.28s21.76-49.28 49.28-49.28 49.28 21.76 49.28 49.28-22.4 49.28-49.28 49.28z m0-72.96c-12.8 0-23.68 10.88-23.68 23.68s10.88 23.68 23.68 23.68 23.68-10.88 23.68-23.68-10.88-23.68-23.68-23.68zM729.6 377.6h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M743.04 389.12c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM332.8 428.8h-25.6V275.2H185.6v-25.6h147.2z" fill="#708DB7" ></path><path d="M320.64 269.44m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M320.64 305.92c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM160.64 312.32c-26.88 0-49.28-21.76-49.28-49.28s21.76-49.28 49.28-49.28 49.28 21.76 49.28 49.28-22.4 49.28-49.28 49.28z m0-72.96c-12.8 0-23.68 10.88-23.68 23.68s10.88 23.68 23.68 23.68 23.68-10.88 23.68-23.68-10.88-23.68-23.68-23.68z" fill="#708DB7" ></path><path d="M147.2 307.2h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M160.64 427.52c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM268.8 531.2h25.6v115.2h-25.6zM844.8 697.6h-147.2V582.4h25.6v89.6h121.6z" fill="#708DB7" ></path><path d="M711.04 691.84m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M711.04 728.32c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM871.04 734.72c-26.88 0-49.28-21.76-49.28-49.28s21.76-49.28 49.28-49.28 49.28 21.76 49.28 49.28-22.4 49.28-49.28 49.28z m0-72.96c-12.8 0-23.68 10.88-23.68 23.68s10.88 23.68 23.68 23.68 23.68-10.88 23.68-23.68-10.88-23.68-23.68-23.68z" fill="#708DB7" ></path><path d="M857.6 729.6h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M871.04 849.92c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM595.2 652.8h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M608.64 773.12c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88zM467.2 806.4H332.8v-25.6h108.8v-121.6h25.6z" fill="#708DB7" ></path><path d="M455.04 794.24m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M455.04 830.72c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88z" fill="#708DB7" ></path><path d="M314.24 787.84m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M314.24 824.32c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88z" fill="#708DB7" ></path><path d="M300.8 812.8h25.6v64h-25.6z" fill="#708DB7" ></path><path d="M314.24 903.04m-23.68 0a23.68 23.68 0 1 0 47.36 0 23.68 23.68 0 1 0-47.36 0Z" fill="#FFF27D" ></path><path d="M314.24 939.52c-19.84 0-36.48-16-36.48-36.48s16-36.48 36.48-36.48 36.48 16 36.48 36.48-16.64 36.48-36.48 36.48z m0-47.36c-5.76 0-10.88 5.12-10.88 10.88s5.12 10.88 10.88 10.88 10.88-5.12 10.88-10.88-5.12-10.88-10.88-10.88z" fill="#708DB7" ></path><path d="M282.24 721.92c-26.88 0-49.28-21.76-49.28-49.28s21.76-49.28 49.28-49.28 49.28 21.76 49.28 49.28-22.4 49.28-49.28 49.28z m0-72.96c-12.8 0-23.68 10.88-23.68 23.68s10.88 23.68 23.68 23.68 23.68-10.88 23.68-23.68-10.88-23.68-23.68-23.68z" fill="#708DB7" ></path></symbol><symbol id="icon-icon-rgb_jiqixuexisuanfayinqing" viewBox="0 0 1024 1024"><path d="M574.72 963.157333l-371.797333-2.048a34.133333 34.133333 0 0 1-33.621334-38.741333l34.133334-251.904C142.506667 580.266667 111.530667 494.933333 111.530667 415.317333v-29.013333c0-179.2 162.986667-325.376 363.434666-325.461333A393.472 393.472 0 0 1 730.453333 153.6a272.384 272.384 0 0 1 93.866667 123.818667 301.141333 301.141333 0 0 1 21.248 102.4 247.466667 247.466667 0 0 1-4.608 42.069333c-3.242667 19.029333-5.973333 35.498667 0 47.36l0.597333 1.28c4.608 10.752 18.432 23.978667 30.549334 35.669333 5.376 5.205333 11.008 10.496 16.128 15.957334 15.957333 11.946667 29.44 31.829333 23.210666 54.869333-7.594667 28.245333-36.864 37.802667-68.266666 41.472l-6.570667 16.128c-11.434667 28.330667-18.773333 45.994667-24.917333 57.6 13.653333 83.456 4.352 133.802667-27.648 149.76a34.816 34.816 0 0 1-4.608 1.877333 88.405333 88.405333 0 0 1-30.890667 4.778667c-27.306667 1.109333-64.512 0-100.522667-0.512L622.933333 847.616l-14.506666 86.613333a34.133333 34.133333 0 0 1-33.706667 28.928z m-332.8-70.058666l303.445333 1.706666 13.568-87.466666a34.133333 34.133333 0 0 1 34.133334-28.928c15.701333 0 35.157333 0.426667 55.808 0.853333 34.133333 0.768 72.192 1.621333 97.365333 0.512h1.194667a341.333333 341.333333 0 0 0-5.888-89.344 34.133333 34.133333 0 0 1 8.533333-29.269333c4.949333-8.533333 16.384-37.034667 22.698667-52.650667 17.066667-42.154667 22.869333-56.746667 46.421333-57.258667h1.706667a175.701333 175.701333 0 0 1-42.069334-53.930666c-14.506667-31.061333-9.216-62.293333-4.949333-87.381334a194.901333 194.901333 0 0 0 3.669333-30.72 234.666667 234.666667 0 0 0-17.066666-77.312l-0.597334-1.621333a201.898667 201.898667 0 0 0-71.68-93.269333l-1.450666-1.194667a325.12 325.12 0 0 0-211.797334-76.8c-162.730667 0-295.168 115.456-295.168 257.194667v29.013333c0 67.157333 30.208 145.664 87.381334 226.986667a34.133333 34.133333 0 0 1 5.888 24.32z m513.194667-236.629334z m64.853333-36.864z m0 0z m0 0z m0 0z m0 0z m0.938667 0z m0 0z m0 0z" fill="" ></path><path d="M605.866667 481.28h-4.778667a34.133333 34.133333 0 0 1 0-68.266667c48.554667 0 48.554667-23.466667 48.554667-31.146666 0-71.850667-30.208-71.850667-52.224-71.850667a41.130667 41.130667 0 0 0-27.050667 10.069333 34.133333 34.133333 0 0 1-56.32-28.16v-2.730666a41.642667 41.642667 0 0 0-46.08-41.728 42.666667 42.666667 0 0 0-32.341333 23.466666 37.461333 37.461333 0 0 0-3.498667 27.733334 34.133333 34.133333 0 0 1-61.610667 26.794666A41.472 41.472 0 0 0 333.994667 307.2a43.776 43.776 0 0 0-39.765334 44.714667 61.269333 61.269333 0 0 0 61.184 61.269333H358.4a34.133333 34.133333 0 1 1 0 68.266667h-3.072a129.621333 129.621333 0 0 1-129.365333-129.621334A110.933333 110.933333 0 0 1 331.093333 238.933333a109.568 109.568 0 0 1 41.472 6.058667q1.194667-2.645333 2.56-5.205333a109.482667 109.482667 0 0 1 197.973334 4.693333 109.568 109.568 0 0 1 24.234666-2.730667c44.970667 0 120.490667 18.176 120.490667 140.117334 0 58.026667-42.666667 96.256-108.458667 99.242666zM477.866667 653.226667a211.029333 211.029333 0 0 1-24.234667-1.450667 12.8 12.8 0 1 1 2.986667-25.6 184.149333 184.149333 0 0 0 21.333333 1.28 175.189333 175.189333 0 0 0 25.514667-1.792 12.8 12.8 0 0 1 3.84 25.6 201.728 201.728 0 0 1-29.44 1.962667z m-88.661334-20.309334A12.8 12.8 0 0 1 384 631.466667a187.733333 187.733333 0 0 1-45.824-30.208 12.8 12.8 0 0 1 17.066667-18.858667 164.181333 164.181333 0 0 0 39.509333 25.6 12.8 12.8 0 0 1-5.546667 24.32z m180.650667-3.669333a12.8 12.8 0 0 1-6.144-24.064 223.658667 223.658667 0 0 0 39.509333-27.818667 12.8 12.8 0 1 1 17.066667 19.285334 248.661333 248.661333 0 0 1-44.117333 30.976 12.714667 12.714667 0 0 1-6.314667 1.621333z" fill="#FF7E00" ></path></symbol><symbol id="icon-kongzhi" viewBox="0 0 1024 1024"><path d="M225.5 241.692c-9.285-3.673-19.406-5.692-30-5.692-10.594 0-20.715 2.019-30 5.692V99c0-16.569 13.431-30 30-30 16.569 0 30 13.431 30 30v142.692z m0 151.423V925c0 16.569-13.431 30-30 30-16.569 0-30-13.431-30-30V393.115c9.285 3.673 19.406 5.692 30 5.692 10.594 0 20.715-2.019 30-5.692z m313.108 235.627C529.294 625.037 519.135 623 508.5 623c-10.552 0-20.637 2.006-29.892 5.656V99c0-16.569 13.432-30 30-30 16.569 0 30 13.431 30 30v529.742z m0 151.516V925c0 16.569-13.431 30-30 30-16.568 0-30-13.431-30-30V780.344c9.255 3.65 19.34 5.656 29.892 5.656 10.635 0 20.794-2.037 30.108-5.742z m321.5-425.322c-9.45-3.828-19.783-5.936-30.608-5.936-10.363 0-20.274 1.932-29.392 5.454V99c0-16.569 13.432-30 30-30 16.569 0 30 13.431 30 30v255.936z m0 150.935V925c0 16.569-13.431 30-30 30-16.568 0-30-13.431-30-30V506.352c9.118 3.523 19.03 5.455 29.392 5.455 10.825 0 21.158-2.108 30.608-5.936z" fill="#85A5FF" ></path><path d="M195.5 458.807c-78.132 0-141.5-63.293-141.5-141.404C54 239.293 117.368 176 195.5 176S337 239.293 337 317.403c0 78.111-63.368 141.404-141.5 141.404zM508.5 846C430.352 846 367 782.648 367 704.5S430.352 563 508.5 563 650 626.352 650 704.5 586.648 846 508.5 846z m321-274.193c-78.132 0-141.5-63.293-141.5-141.404C688 352.293 751.368 289 829.5 289S971 352.293 971 430.403c0 78.111-63.368 141.404-141.5 141.404z m-634-173c45.011 0 81.5-36.446 81.5-81.404C277 272.446 240.511 236 195.5 236S114 272.446 114 317.403c0 44.958 36.489 81.404 81.5 81.404zM508.5 786c45.011 0 81.5-36.489 81.5-81.5S553.511 623 508.5 623 427 659.489 427 704.5s36.489 81.5 81.5 81.5z m321-274.193c45.011 0 81.5-36.446 81.5-81.404C911 385.446 874.511 349 829.5 349S748 385.446 748 430.403c0 44.958 36.489 81.404 81.5 81.404z" fill="#2F54EB" ></path></symbol><symbol id="icon-robothand" viewBox="0 0 1024 1024"><path d="M512 512m-414 0a414 414 0 1 0 828 0 414 414 0 1 0-828 0Z" fill="#F0C48A" ></path><path d="M495.2 200.6L330.2 142 189.6 536l164.8 58.6z" fill="#D3E6F8" ></path><path d="M347.6 460.8l-158 75 158.6 334 206 25.8z" fill="#D3E6F8" ></path><path d="M374.6 650.8L476 855.8l64.8-4.6-125-232.6zM352.8 404l63-159 63.8-0.8-73 204.8zM630 853v-106.6h84v106.6" fill="#A4CFF2" ></path><path d="M679.2 755h35v97.8h-35zM672.6 303.4l173.8-38c12.6-2.8 21.6-14 21.8-27 0-15.8-13.4-28.4-29.2-27.6l-160.6 9.4c-15 0.8-30-3.8-41.8-13-32.2-25-32.2-73.8 0.2-98.6 12-9.2 26.8-13.8 41.8-12.8l160.4 9.8c15.8 1 29.2-11.6 29.2-27.4 0-13-9-24.2-21.6-27L673 13c-18.4-4-37.4 1.6-50.8 14.8l-49.6 49.6-120.6-0.2-0.2 162.2 120.6 0.2v-0.6l49.6 49.6c13 13.2 32.2 18.8 50.6 14.8z" fill="#7BABF1" ></path><path d="M354.4 606.4c-1.4 0-2.6-0.2-4-0.6l-165-58.6c-3-1-5.4-3.2-6.6-6-1.4-2.8-1.4-6-0.4-9l140.6-394c2.2-6 8.8-9.2 15-7.2l165 58.6c3 1 5.4 3.2 6.6 6 1.4 2.8 1.4 6 0.4 9l-140.6 394c-1.6 4.8-6 7.8-11 7.8z m-149.8-77.6l142.8 50.8 132.8-371.8-142.8-50.8-132.8 371.8z" fill="#4C4372" ></path><path d="M554.2 907.2h-1.4l-206-25.6c-4-0.4-7.4-3-9.2-6.6l-158.8-334c-1.4-2.8-1.6-6-0.4-9 1-3 3.2-5.4 6-6.6l158.2-75.2c5.8-2.8 12.8-0.2 15.6 5.6l206.6 434.8c1.8 3.8 1.4 8.4-1 11.8-2.2 3.2-5.8 4.8-9.6 4.8zM356 859l178.4 22.2L342 476.4l-137 65L356 859z" fill="#4C4372" ></path><path d="M196.266081 626.37535a138 138 0 1 0 195.158065-195.164878 138 138 0 1 0-195.158065 195.164878Z" fill="#E8677D" ></path><path d="M294 678.6c-17 0-34-3-50.4-8.8-37.8-13.4-68-40.8-85-76.8-17.2-36.2-19.2-76.8-5.8-114.6 13.4-37.8 40.8-68 76.8-85 36.2-17.2 76.8-19.2 114.6-5.8 37.8 13.4 68 40.8 85 76.8 17.2 36.2 19.2 76.8 5.8 114.6-13.4 37.8-40.8 68-76.8 85-20.4 9.8-42.4 14.6-64.2 14.6z m-0.2-276.4c-18.6 0-37 4.2-54.2 12.2-30.4 14.4-53.6 40-64.8 71.8-11.4 31.8-9.6 66.2 5 96.6 14.4 30.4 40 53.6 71.8 64.8 31.8 11.4 66.2 9.6 96.6-5 30.4-14.4 53.6-40 64.8-71.8 11.4-31.8 9.6-66.2-5-96.6-14.4-30.4-40-53.6-71.8-64.8-13.8-4.6-28.2-7.2-42.4-7.2z" fill="#4C4372" ></path><path d="M223.268258 542.261771a71.8 71.8 0 1 0 141.058328-26.898109 71.8 71.8 0 1 0-141.058328 26.898109Z" fill="#FD919E" ></path><path d="M294 612.2c-31.2 0-61.2-17.6-75.6-47.6-19.8-41.6-2-91.6 39.6-111.2 20.2-9.6 42.8-10.8 63.8-3.2 21 7.4 37.8 22.6 47.4 42.8 19.8 41.6 2 91.6-39.6 111.2-11.4 5.4-23.6 8-35.6 8z m-0.2-143.6c-8.6 0-17.4 1.8-25.6 5.8-30 14.2-42.6 50.2-28.4 80 14.2 30 50.2 42.8 80 28.4 30-14.2 42.6-50.2 28.4-80-10.4-21.4-32-34.2-54.4-34.2zM660.8 316.4c-17.6 0-34.4-7-47.2-19.6L568 251.2l-116.4-0.2c-6.4 0-11.8-5.2-11.8-11.8l0.2-162.2c0-3.2 1.2-6 3.4-8.2 2.2-2.2 5.2-3.4 8.2-3.4l115.8 0.2 46.2-46c16.2-16.2 39.2-22.8 61.6-18L849 40c17.8 4 30.8 20.2 30.8 38.4 0 10.8-4.6 21.2-12.4 28.6-7.8 7.4-18.6 11.2-29.4 10.6l-160.4-9.8c-12.2-0.8-24.4 3-34 10.4-12.6 9.6-19.8 24.2-19.8 40s7.2 30.4 19.6 40c9.6 7.6 21.8 11.2 34 10.6l160.6-9.4c10.8-0.6 21.4 3.2 29.2 10.6 7.8 7.4 12.4 17.8 12.4 28.6 0 18.4-13 34.4-31 38.4l-173.8 38c-4.4 0.8-9.4 1.4-14 1.4z m-88.4-89.2c3 0 6 1.2 8.4 3.4l49.6 49.6c10.6 10.6 25.4 15 40 11.8l173.8-38c7.2-1.6 12.4-8 12.4-15.4 0-4.4-1.8-8.6-5-11.6s-7.4-4.6-11.8-4.2l-160.6 9.4c-17.8 1-35.6-4.4-49.8-15.4-18.2-14.2-28.8-35.6-28.8-58.6 0-23.2 10.6-44.4 28.8-58.6 14.2-11 31.8-16.4 49.8-15.2l160.4 9.8c4.4 0.2 8.6-1.2 11.8-4.2 3.2-3 5-7.2 5-11.6 0-7.4-5.2-14-12.4-15.6l-173.8-38.4c-14.6-3.2-29.4 1.2-40 11.6l-49.6 49.6c-2.2 2.2-5.2 3.4-8.2 3.4l-109-0.2-0.2 138.6 105.2 0.2c1.4-0.2 2.6-0.4 4-0.4z" fill="#4C4372" ></path><path d="M380.513092 259.927535a104.8 104.8 0 1 0 70.2624-197.472416 104.8 104.8 0 1 0-70.2624 197.472416Z" fill="#E8677D" ></path><path d="M410.490338 202.100288a41.2 41.2 0 1 0 10.308909-81.752592 41.2 41.2 0 1 0-10.308909 81.752592Z" fill="#FD919E" ></path><path d="M415.8 277.8c-43.6 0-85.4-24.6-105.4-66.4-13.4-28-15-59.8-4.6-89 10.4-29.4 31.6-52.8 59.8-66.2 58-27.6 127.6-2.8 155.2 55.2 13.4 28 15 59.8 4.6 89-10.4 29.4-31.6 52.8-59.8 66.2-16 7.6-33 11.2-49.8 11.2z m-0.2-209.4c-13.4 0-27 2.8-39.8 9-22.4 10.6-39.4 29.4-47.8 52.8-8.4 23.4-7 48.6 3.6 71 22 46.4 77.6 66 123.8 44 22.4-10.6 39.4-29.4 47.8-52.8 8.4-23.4 7-48.6-3.6-71-15.8-33.4-49.2-53-84-53z" fill="#4C4372" ></path><path d="M415.8 214.2c-6 0-12-1-17.8-3-13.2-4.8-24-14.4-30-27.2-6-12.8-6.8-27-2-40.4 4.8-13.2 14.4-24 27.2-30 12.8-6 27-6.8 40.4-2 13.2 4.8 24 14.4 30 27.2 6 12.8 6.8 27 2 40.4-4.8 13.2-14.4 24-27.2 30-7.2 3.2-15 5-22.6 5z m-0.2-82.2c-4.2 0-8.6 1-12.6 2.8-7 3.4-12.4 9.2-15 16.6-2.6 7.4-2.2 15.4 1.2 22.4 3.4 7 9.2 12.4 16.6 15 7.4 2.6 15.4 2.2 22.4-1.2 7-3.4 12.4-9.2 15-16.6 2.6-7.4 2.2-15.4-1.2-22.4-4.8-10.4-15.4-16.6-26.4-16.6z" fill="#4C4372" ></path><path d="M843.8 1012.2H163.2v-75.4c0-46.2 37.4-83.6 83.6-83.6H760c46.2 0 83.6 37.4 83.6 83.6v75.4z" fill="#D3E6F8" ></path><path d="M305.4 791.6c-4.6 0-9-2.8-10.8-7.2-2.4-6 0.4-12.8 6.4-15.4l162-67c6-2.4 12.8 0.4 15.4 6.4 2.4 6-0.4 12.8-6.4 15.4l-162 67c-1.6 0.4-3 0.8-4.6 0.8zM714 864.6c-6.4 0-11.8-5.2-11.8-11.8V758h-60.6v94.8c0 6.4-5.2 11.8-11.8 11.8-6.4 0-11.8-5.2-11.8-11.8v-106.6c0-6.4 5.2-11.8 11.8-11.8H714c6.4 0 11.8 5.2 11.8 11.8v106.6c0 6.6-5.2 11.8-11.8 11.8z" fill="#4C4372" ></path><path d="M843.8 1010.8h-56.8v-145.4c31.4 0 56.8 25.4 56.8 56.8v88.6z" fill="#A4CFF2" ></path><path d="M843.8 1024H163.2c-6.4 0-11.8-5.2-11.8-11.8v-75.4c0-52.6 42.8-95.4 95.4-95.4H760c52.6 0 95.4 42.8 95.4 95.4v75.4c0.2 6.6-5 11.8-11.6 11.8zM175 1000.6h657.2v-63.6c0-39.6-32.2-72-72-72H246.8c-39.6 0-72 32.2-72 72v63.6z" fill="#4C4372" ></path></symbol><symbol id="icon-sf" viewBox="0 0 1024 1024"><path d="M511.82 512.5v435L888.54 730l-0.02-435z" fill="#C3D2FB" ></path><path d="M135.1 295l376.72 217.5v435L135.1 730z" fill="#3D4265" ></path><path d="M511.82 512.5L888.54 295 511.82 77.5 135.1 295z" fill="#386BF3" ></path></symbol><symbol id="icon-mathematica" viewBox="0 0 1024 1024"><path d="M511.914667 65.066667l-3.114667 1.066666-19.626667 33.877334-19.370666 32.554666-51.968 89.130667h-0.725334L252.586667 149.333333l-4.266667-2.005333h-0.768v3.925333l1.066667 6.954667v3.669333l5.632 52.352v3.498667l1.365333 10.752v3.498667l9.386667 91.178666v3.2l0.768 3.498667v2.56l-100.224 21.589333-1.706667 0.64-19.456 4.266667-1.066667 0.426667h-1.834666l-46.72 10.453333-1.706667 0.298667-7.253333 1.493333v3.498667l0.768 0.426666 79.317333 89.002667 2.218667 2.261333 4.906666 5.632 34.304 38.741334v0.256l-2.261333 2.133333-9.386667 10.922667-109.397333 122.709333-0.426667 0.298667v3.498666l3.029334 0.256 12.586666 3.157334 72.405334 15.658666v0.256l91.306666 20.096h0.597334v2.005334l-1.493334 10.752v3.413333l-2.005333 17.578667v3.498666l-1.493333 10.453334v3.498666l-1.962667 17.578667v3.413333l-2.133333 17.450667v3.413333l-1.536 10.453334v3.498666l-1.962667 17.578667v3.498667l-2.133333 17.365333v3.498667l-1.365334 10.581333v3.498667l-2.133333 17.365333v4.437333h1.578667l155.392-68.266666 12.544-5.76h0.768l7.552 13.312 22.997333 38.912 0.64 1.365333 36.437333 62.506667 6.826667 11.178666 17.237333 29.610667 0.298667 0.938667h3.925333l0.213334-0.938667 0.725333-1.066667 23.893333-40.362666 0.64-1.834667 25.557334-44.032 13.482666-23.04 27.52-46.506667 2.133334 0.512 166.613333 73.472h1.493333v-3.626666l-5.888-56.32v-3.498667l-1.365333-10.453333V797.866667l-1.493333-10.410667v-3.626667l-1.408-10.453333v-3.413333l-1.365334-10.453334v-3.498666l-1.365333-10.453334v-3.626666l-1.493333-10.410667v-3.498667l-1.365334-10.453333v-3.498667l-1.408-10.453333v-3.626667l-1.066666-7.253333v-2.218667l69.632-15.146666 1.834666-0.298667 19.541334-4.565333h1.194666v-0.426667l9.813334-2.133333 1.28-0.426667h1.792l16.298666-3.84 1.066667-0.426667h1.834667l8.277333-2.133333h1.408l43.306667-9.813333 2.986666-0.298667v-2.773333l-0.64-0.554667-50.773333-57.258667-1.194667-1.152-8.405333-9.386666-60.928-68.437334v-0.256l12.586667-13.824 17.066666-19.498666 91.648-102.741334 0.64-0.426666v-2.773334l-1.493333-0.298666-54.954667-11.946667-15.872-3.626667-2.005333-0.426666-105.856-23.210667v-1.92l18.432-181.930667v-0.853333h-1.792l-12.885333 5.717333-0.426667 0.64h-1.066667L619.093333 215.893333l-12.672 5.76h-0.64L519.253333 73.045333l-4.224-6.186666-0.597333-1.92z m-0.085334 47.488l58.282667 99.157333 14.506667 25.216-0.341334 1.066667-50.346666 64.512-22.101334 28.16-0.469333-0.469334-11.008-14.250666-1.706667-2.133334L439.04 237.568l1.28-2.688 58.794667-100.949333 12.245333-20.906667z m209.493334 87.04l-0.341334 1.024-7.210666 9.642666-22.912 2.816z m-418.901334 0.170666l2.218667 0.853334 28.885333 12.757333H312.32l-9.557333-12.757333zM743.808 213.333333l-5.248 53.248-4.821333-39.552 9.6-13.141333z m-395.093333 6.698667l2.261333 0.981333 30.08 13.226667-32.341333-7.466667z m315.178666 4.906667l0.853334 7.210666-56.192 17.194667 0.085333-0.128 6.826667-3.072 43.306666-18.944zM433.28 272.64l40.277333 51.370667v0.426666l-48.213333-17.194666z m151.466667 7.296l8.917333 29.141333-9.941333 3.541334-3.84 0.938666-29.866667 10.88 0.256-0.938666 33.152-41.856z m-213.333334 35.669333l42.069334 15.189334 38.314666 13.312 2.048 0.896 44.928 15.872 0.512 131.669333-15.445333-4.992-28.586667-9.557333-3.456-1.621334-31.402666-10.453333-32.810667-10.922667-12.416-4.266666-0.426667-10.837334-1.408-51.029333-0.426666-12.245333-0.597334-38.101334-0.597333-12.714666z m280.874667 0l-0.512 9.728-1.194667 38.4-0.298666 12.885334-1.365334 62.933333-0.426666 11.178667-14.378667 5.034666-31.317333 10.410667-32.853334 10.965333-30.421333 10.410667-15.104 4.992 0.426667-131.669333 69.632-24.618667z m24.917333 18.645334l3.84 31.36 33.706667-4.096-39.04 55.552-0.725333 0.256 0.426666-7.808 0.768-37.461334z m-403.242666 22.869333l6.485333 9.386667 61.781333 87.466666-111.274666 41.258667-2.133334 0.64L144.725333 401.493333l-11.946666-13.312 0.128-0.426666 4.864-0.768 18.133333-4.266667 5.973333-0.938667 14.336-3.285333 1.792-0.426667z m475.562666 0.128l140.117334 30.421333 1.28 0.426667-0.981334 1.109333-83.370666 93.482667-11.776 13.312-3.968-1.493333-109.354667-40.533334 20.224-29.098666 6.528-9.173334z m-439.253333 6.4h36.736l1.493333 53.674667-0.554666-0.256-32.554667-45.994667z m57.941333 111.957333l6.485334 2.56 32.853333 10.752 30.421333 10.453334 31.786667 10.581333 20.906667 7.125333-2.773334 3.925334-73.514666 99.541333-43.306667-12.842667-3.498667-0.768-1.493333-0.64-81.109333-23.893333 39.978666-52.053333 41.898667-54.485334z m287.146667 0l1.408 0.256 76.245333 99.328 5.632 7.253334-5.418666 1.493333-1.408 0.64-93.653334 27.349333-4.522666 1.408-24.064 7.253334-0.725334-0.128-44.970666-61.44-7.424-10.24-23.296-30.976-0.341334-0.725334 20.053334-6.826666 32.768-10.88 30.464-10.410667 32.810666-10.752z m-331.306667 13.013334l-0.341333 0.853333-17.237333 22.357333-12.416-12.458666 28.032-10.453334z m375.552 0l1.792 0.341333 24.704 9.045333 30.421334 11.52-28.16 16.810667-16-20.48-1.28-1.792-11.178667-14.549333z m-462.634666 32l-28.586667 28.501333 15.146667-16.938667 8.789333-9.813333z m550.826666 0.682666l2.901334 1.066667 1.92 1.834667 23.637333 26.752 1.834667 1.792 8.661333 9.770666-10.88 5.717334z m-276.181333 11.306667l0.938667 0.64 58.88 79.872 1.365333 2.133333 14.634667 19.882667 0.341333 1.28-3.754667 5.034667-18.005333 26.794666-2.005333 3.2-10.453334 14.634667-41.386666 61.013333-0.554667 0.298667-50.346667-73.386667-4.053333-6.826666-21.077333-30.250667-0.298667-1.536 68.992-93.525333 0.298667-0.426667z m333.952 50.944l24.149333 27.008 2.688 3.498667-11.648-3.925334-1.536-0.554666z m-673.493333 6.314667l12.714666 12.757333-27.178666 9.301333-6.528 2.133334 1.621333-2.432z m564.266666 20.053333l-36.48 19.157333 14.762667 28.117334-7.893333-2.432-11.52-3.754667-46.592-14.890667 0.512-0.426666z m-413.312 10.88l52.138667 15.189333-0.256 0.341334-19.541333 6.186666-18.901334 5.717334-1.365333 0.426666-20.906667 6.698667z m-117.973333 2.090667l13.568 13.610666 85.632 22.058667-24.192 7.68-2.346667 0.213333-89.728-20.053333-31.744-6.656 0.298667-0.256z m638.549333 8.746666l23.381334 7.978667v0.128l-19.498667 4.266667-1.834667 0.597333-45.653333 9.813333zM407.04 653.226667l0.298667 9.685333 0.426666 14.805333 1.066667 58.112 1.066667 29.482667-0.298667 10.88-10.24 4.565333-122.154667 53.589334 1.408-15.872 1.365334-10.88 0.725333-9.685334 1.322667-10.965333 1.578666-17.365333 1.92-17.877334 0.768-9.813333 1.365334-10.752 1.365333-17.536 2.133333-17.706667 0.554667-5.973333 62.08-19.456 0.128-0.64 12.885333-4.181333z m209.450667 0l53.12 16.64v0.597333l13.312 4.266667 48.853333 15.402666 0.938667 9.813334 1.322666 10.88 1.834667 17.450666 1.706667 17.877334 0.725333 9.813333 1.365333 10.752 1.365334 17.536 1.834666 13.866667 3.285334 36.224-3.285334-1.706667-129.066666-56.448-0.213334-12.970667 2.56-101.077333z m-183.253334 26.282666l0.597334 0.341334 2.901333 4.565333 25.557333 37.290667-27.264 22.698666-1.493333-61.397333z m156.586667 0h0.341333l-0.213333 2.56-0.853333 28.928-0.170667 9.130667-20.48-9.472z m-123.221333 153.813334l32.554666 39.082666 0.042667 15.786667-0.725333-0.298667-1.066667-2.133333-19.797333-33.706667-0.512-0.768z m65.28 26.026666l7.850666 3.541334-14.634666 25.002666-0.768 0.298667 0.085333-22.656z" fill="#F44336" ></path></symbol><symbol id="icon-CPU" viewBox="0 0 1024 1024"><path d="M426.666667 85.333333v85.333334h170.666666V85.333333h85.333334v85.333334h42.666666a128 128 0 0 1 128 128v42.666666h85.333334v85.333334h-85.333334v170.666666h85.333334v85.333334h-85.333334v42.666666a128 128 0 0 1-128 128h-42.666666v85.333334h-85.333334v-85.333334h-170.666666v85.333334h-85.333334v-85.333334h-42.666666a128 128 0 0 1-128-128v-42.666666H85.333333v-85.333334h85.333334v-170.666666H85.333333v-85.333334h85.333334v-42.666666a128 128 0 0 1 128-128h42.666666V85.333333h85.333334z m-128 170.666667a42.666667 42.666667 0 0 0-42.666667 42.666667v426.666666a42.666667 42.666667 0 0 0 42.666667 42.666667h426.666666a42.666667 42.666667 0 0 0 42.666667-42.666667V298.666667a42.666667 42.666667 0 0 0-42.666667-42.666667H298.666667z" fill="#000000" ></path><path d="M362.666667 405.333333a42.666667 42.666667 0 0 1 42.666666-42.666666h213.333334a42.666667 42.666667 0 0 1 42.666666 42.666666v213.333334a42.666667 42.666667 0 0 1-42.666666 42.666666H405.333333a42.666667 42.666667 0 0 1-42.666666-42.666666V405.333333z m85.333333 42.666667v128h128v-128h-128z" fill="#0078FF" ></path></symbol><symbol id="icon-wodeyouxiang" viewBox="0 0 1024 1024"><path d="M925.952 744.96H170.24c-20.096 0-36.48-16.256-36.48-36.48V312.32c0-61.568 49.92-111.488 111.488-111.488h605.568c61.568 0 111.488 49.92 111.488 111.488v396.16c0 20.224-16.256 36.48-36.352 36.48z m0 0" fill="#F44336" ></path><path d="M343.552 713.856H190.08c-9.088 0-16.384-7.296-16.384-16.384v-358.4c0-51.456 41.728-93.056 93.184-93.056 51.456 0 93.056 41.728 93.056 93.056v358.4c0 9.088-7.296 16.384-16.384 16.384z m0 25.6" fill="#C62828" ></path><path d="M344.32 713.856H68.608V349.696h291.328v347.008c0 5.632-1.792 8.704-3.968 11.392-2.688 3.328-7.168 5.632-11.648 5.76z m0 0" fill="#F5F5F5" ></path><path d="M68.608 531.84v182.016H344.32c4.608-0.128 8.96-2.432 11.648-5.632 2.304-2.688 4.096-5.888 3.968-11.392V531.84H68.608z m0 0" fill="#D8D8D8" ></path><path d="M359.936 531.712L68.608 713.856V349.696l291.328 182.016z m0 0" fill="#E5E5E5" ></path><path d="M558.336 972.8c-17.152 0-31.104-13.952-31.104-31.104V744.96h62.08v196.736c0.128 17.152-13.696 31.104-30.976 31.104z m-83.072-457.472c10.112 0 18.176-8.192 18.176-18.176V90.752h-23.168c-10.112 0-18.176 8.192-18.176 18.176v388.224c0 10.112 8.192 18.176 18.176 18.176h4.992z m258.816-217.472c10.112 0 18.176-8.192 18.176-18.432V108.8c0-10.112-8.192-18.176-18.176-18.176h-245.76c-20.224 0-36.48 16.384-36.48 36.48v134.272c0 20.224 16.384 36.48 36.48 36.48h245.76z" fill="#FFCA28" ></path></symbol><symbol id="icon-QQ" viewBox="0 0 1024 1024"><path d="M511.500488 512.499512m-511.500488 0a511.500488 511.500488 0 1 0 1023.000976 0 511.500488 511.500488 0 1 0-1023.000976 0Z" fill="#1BC1FA" ></path><path d="M784.234146 572.440976c8.178014 0 16.273108 0.253752 24.282287 0.728288-16.961436-38.434466-42.247742-69.886751-58.977405-90.331785 2.822244-8.482716 11.30496-56.536788-25.443153-90.453666v-2.827239c0-132.850263-96.103149-231.785647-214.822213-231.785647-118.717065 0-214.82521 96.107145-214.825209 231.785647v2.827239c-33.915879 33.915879-25.437159 81.969951-19.782681 90.453666-25.444152 28.265397-73.49223 87.62343-76.320469 155.461182 0 16.961436 2.827239 45.226833 11.305959 56.531794 11.305959 14.133198 39.570357-2.827239 62.186272-48.054073 5.650482 19.788675 19.78368 53.709549 50.876316 93.281905-50.876316 11.302962-65.009514 62.186271-48.049077 90.450669 11.305959 19.788675 39.570357 33.920874 87.624429 33.920874 78.496343 0 115.815899-19.378076 134.378771-35.711126C492.644901 814.680414 490.520976 800.136617 490.520976 785.233171c0-117.522232 131.500581-212.792195 293.71317-212.792195z" fill="#FFFFFF" ></path><path d="M514.925143 819.204995c5.654478 0 11.309955 2.82624 14.132199 5.649483 16.960437 16.960437 53.709549 39.575352 138.50674 39.575352 48.054072 0 76.320468-16.960437 87.625428-33.920874 16.960437-28.264398 2.827239-79.147707-48.054072-90.450669 31.092636-39.572355 45.225834-73.493229 50.881311-93.281905 19.787676 45.226833 50.881311 62.18727 62.186271 48.054073 2.827239-11.30496 5.650482-39.570357 5.650482-56.531794-1.93511-23.223321-8.508691-45.121936-17.337069-65.128398-8.009179-0.475536-16.104273-0.729288-24.282287-0.729287-162.212589 0-293.713171 95.269963-293.71317 212.792195 0 14.903446 2.123926 29.447243 6.147996 43.485533a88.18688 88.18688 0 0 0 4.122973-3.864226c2.827239-2.823243 8.481717-5.649483 14.133198-5.649483z" fill="#FFFFFF" opacity=".4" ></path></symbol><symbol id="icon-leida" viewBox="0 0 1024 1024"><path d="M813.026 210.68a64.114 64.114 0 0 0 18.304 2.654c35.35 0 64-28.652 64-64s-28.65-64-64-64-64 28.652-64 64c0 6.37 0.94 12.522 2.666 18.33-107.88 76.614-253.12 183.542-344 265.76l121.26 121.262c82.22-90.878 189.162-236.118 265.77-344.006z" fill="#FCBF28" ></path><path d="M108.706 901.16c73.856-190.794 173.334-367.826 173.334-367.826s253.034 196.416 371.82 364.9c16.894 23.98 0.554 54.414-29.164 56.13C577.294 957.1 500.6 960 388.366 960c-119.552 0-198.764-3.29-245.228-6.17-27.05-1.674-44.032-27.872-34.432-52.672z" fill="#A871FF" ></path><path d="M317.816 662.86c160.576 160.588 416.192 168.248 585.834 22.98 15.104-12.924 17.3-34.68 5.312-50.52-31.254-41.296-106.39-132.31-268.864-294.764C477.646 178.1 386.64 102.96 345.336 71.7c-15.83-11.994-37.59-9.788-50.518 5.304-145.258 169.654-137.6 425.264 22.998 585.854z" fill="#CFAEFF" ></path></symbol><symbol id="icon-jiqiren" viewBox="0 0 1179 1024"><path d="M597.215632 994.574713h403.714943s43.549425-8.945287 43.549425-114.64092 94.16092-577.677241-459.976092-577.677241-457.151264 541.425287-457.151264 541.425287-25.423448 160.77977 54.848735 157.013333 415.014253-6.12046 415.014253-6.120459z" fill="#FFFFFF" ></path><path d="M1071.786667 712.798161h72.503908v136.297931h-72.503908zM36.016552 712.798161h72.503908v136.297931H36.016552z" fill="#EA5D5C" ></path><path d="M305.68366 559.40926l556.254412-1.165018 0.398364 190.20464-556.254412 1.165018-0.398364-190.20464Z" fill="#4C66AF" ></path><path d="M1129.931034 680.312644h-59.556781c-3.295632-152.069885-67.56046-258.942529-172.079081-324.384368l115.347127-238.462529a47.08046 47.08046 0 1 0-42.372414-20.48l-114.640919 236.57931a625.934713 625.934713 0 0 0-269.30023-53.200919 625.228506 625.228506 0 0 0-270.006437 54.848736l-115.817931-235.402299a47.08046 47.08046 0 1 0-42.372414 20.715402l117.701149 238.462529c-103.812414 65.441839-167.135632 173.02069-169.960459 324.61977H47.786667a47.08046 47.08046 0 0 0-47.08046 47.08046v117.701149a47.08046 47.08046 0 0 0 47.08046 47.08046h58.615172v57.908965a70.62069 70.62069 0 0 0 70.62069 70.62069l823.908046-1.647816a70.62069 70.62069 0 0 0 70.620689-70.62069v-57.908965h59.085977a47.08046 47.08046 0 0 0 47.08046-47.08046v-117.701149A47.08046 47.08046 0 0 0 1129.931034 680.312644zM94.16092 847.212874H47.08046v-117.70115h47.08046v117.70115z m929.83908 103.106206a23.54023 23.54023 0 0 1-23.54023 23.54023l-823.908046 1.647816a23.54023 23.54023 0 0 1-23.54023-23.540229v-258.942529c0-329.563218 303.668966-365.57977 434.788046-365.815173s435.494253 34.604138 436.20046 363.931954z m105.46023-105.224827h-47.08046v-117.70115h47.08046v117.70115z" fill="#3F4651" ></path><path d="M464.684138 135.827126l22.363218-19.53839 40.018391 62.381609a30.131494 30.131494 0 0 0 25.423448 13.888735h2.824828a30.131494 30.131494 0 0 0 25.188046-19.067586l20.715402-79.095172 21.186207 74.387126v2.118621a30.366897 30.366897 0 0 0 52.494713 6.826667l30.366896-57.202759 13.182529 12.947126a30.131494 30.131494 0 0 0 21.186207 8.709886h57.673563a23.54023 23.54023 0 0 0 23.54023-23.54023 23.54023 23.54023 0 0 0-23.54023-23.54023h-50.140689l-23.54023-23.54023a30.366897 30.366897 0 0 0-45.668046 3.766437l-21.42161 40.01839L629.465747 19.302989a30.131494 30.131494 0 0 0-28.012873-19.067587 30.131494 30.131494 0 0 0-28.012874 19.067587l-26.60046 101.693793-29.660689-47.08046a30.366897 30.366897 0 0 0-20.48-13.653333 30.837701 30.837701 0 0 0-23.54023 6.826666l-32.250115 28.248276h-60.027586a23.54023 23.54023 0 0 0-23.54023 23.54023 23.54023 23.54023 0 0 0 23.54023 23.54023h66.148046a31.308506 31.308506 0 0 0 17.655172-6.591265zM776.121379 532.950805H404.421149A121.232184 121.232184 0 0 0 282.482759 639.352644a117.701149 117.701149 0 0 0 117.701149 129.000459h371.70023a121.232184 121.232184 0 0 0 121.938391-106.401839 117.701149 117.701149 0 0 0-117.70115-129.000459z m0 188.321839H402.302529a72.503908 72.503908 0 0 1-72.268506-56.496552 70.62069 70.62069 0 0 1 68.972874-84.744828h373.81885a72.503908 72.503908 0 0 1 72.268506 56.496552 70.62069 70.62069 0 0 1-68.502069 84.744828z" fill="#3F4651" ></path></symbol><symbol id="icon-biaoqian1" viewBox="0 0 1024 1024"><path d="M905.0112 560.4352l-342.784 342.784c-56.7808 56.7808-148.7872 56.7808-205.568 0l-231.5776-231.5776c-56.7808-56.7808-56.7808-148.7872 0-205.568l342.9376-342.9376a114.8928 114.8928 0 0 1 84.224-33.5872l266.3936 7.2192c60.7744 1.6384 109.7216 50.3808 111.5648 111.1552l8.2944 267.8272c1.024 31.6928-11.1104 62.3104-33.4848 84.6848z" fill="#8C7BFD" ></path><path d="M675.2256 491.4688c-82.176 0-149.0432-66.8672-149.0432-149.0432s66.8672-149.0432 149.0432-149.0432 149.0432 66.8672 149.0432 149.0432-66.8672 149.0432-149.0432 149.0432z m0-192.2048c-23.808 0-43.2128 19.3536-43.2128 43.2128 0 23.808 19.3536 43.2128 43.2128 43.2128 23.808 0 43.2128-19.3536 43.2128-43.2128s-19.4048-43.2128-43.2128-43.2128z" fill="#FFE37B" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75h-738.7a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 512m-512 0a512 512 0 1 0 1024 0 512 512 0 1 0-1024 0Z" fill="#4186F5" ></path><path d="M611.944 302.056c0-15.701 2.75-30.802 7.816-44.917a384.238 384.238 0 0 0-186.11 2.956c-74.501-50.063-93.407-71.902-107.975-39.618a136.243 136.243 0 0 0-3.961 102.287 149.515 149.515 0 0 0-39.949 104.806c0 148.743 92.139 181.875 179.961 191.61a83.898 83.898 0 0 0-25.192 51.863c-40.708 22.518-91.94 8.261-115.181-32.058a83.117 83.117 0 0 0-60.466-39.98s-38.871-0.361-2.879 23.408a102.97 102.97 0 0 1 43.912 56.906s23.398 75.279 133.531 51.863v65.913c0 10.443 13.548 42.63 102.328 42.63 71.275 0 94.913-30.385 94.913-42.987V690.485a90.052 90.052 0 0 0-26.996-72.03c83.996-9.381 173.328-40.204 179.6-176.098a164.706 164.706 0 0 1-21.129 1.365c-84.07 0-152.223-63.426-152.223-141.666z" fill="#FFFFFF" ></path><path d="M743.554 322.765a136.267 136.267 0 0 0-3.961-102.289s-32.396-10.445-107.979 39.618a385.536 385.536 0 0 0-11.853-2.956 132.623 132.623 0 0 0-7.816 44.917c0 78.24 68.152 141.667 152.222 141.667 7.171 0 14.222-0.472 21.129-1.365 0.231-5.03 0.363-10.187 0.363-15.509a149.534 149.534 0 0 0-42.105-104.083z" fill="#FFFFFF" opacity=".4" ></path></symbol><symbol id="icon-biji" viewBox="0 0 1024 1024"><path d="M798.42 76.032c37.804 4.244 66.988 29.9 73.858 67.306C883.114 202.426 896 314.252 896 512c0 177.468-5.76 285.732-11.306 348.78-4.224 48.078-39.872 83.73-87.916 88.304C739.882 954.498 648.49 960 512 960s-227.882-5.5-284.78-10.916c-48.04-4.574-83.69-40.226-87.914-88.304C133.76 797.732 128 689.466 128 512c0-177.466 5.76-285.732 11.306-348.78 4.224-48.078 39.872-83.73 87.916-88.304C284.118 69.502 375.51 64 512 64c145.9 0 235.242 6.284 286.42 12.032z" fill="#53B5FF" ></path><path d="M298.666 69.52v884.956c-28.202-1.654-51.86-3.53-71.444-5.392-48.044-4.574-83.692-40.226-87.916-88.304C133.76 797.73 128 689.466 128 512c0-177.468 5.76-285.732 11.306-348.782 4.224-48.076 39.872-83.73 87.916-88.3 19.584-1.866 43.242-3.74 71.444-5.396z" fill="#FCBF28" ></path><path d="M426.666 268.05c0-16.306 12.268-29.768 28.544-30.596 25.686-1.306 70.572-2.788 142.124-2.788 71.552 0 116.436 1.48 142.122 2.788 16.278 0.828 28.544 14.29 28.544 30.596v18.568c0 16.304-12.266 29.766-28.544 30.594-25.686 1.308-70.57 2.788-142.122 2.788-71.552 0-116.438-1.48-142.124-2.788-16.276-0.828-28.544-14.29-28.544-30.594v-18.568zM426.666 438.716c0-16.306 12.268-29.916 28.524-30.96 18.708-1.202 45.674-2.422 78.144-2.422 32.468 0 59.434 1.22 78.144 2.42 16.256 1.046 28.522 14.656 28.522 30.96v18.57c0 16.306-12.266 29.916-28.522 30.96-18.71 1.202-45.676 2.422-78.144 2.422-32.47 0-59.436-1.22-78.144-2.42-16.256-1.046-28.524-14.656-28.524-30.96v-18.57z" fill="#FFFFFF" ></path></symbol><symbol id="icon-biaoqian" viewBox="0 0 1024 1024"><path d="M128.37 199.122c3.28-38.772 28.064-70.668 66.322-78.238C249.256 110.094 347.04 98 511.24 98s261.984 12.094 316.548 22.884c38.26 7.57 63.04 39.466 66.32 78.238 5.454 64.148 12.372 179.596 12.372 352.198 0 159.56-3.084 257.776-6.76 318.148-3.42 56.204-46.42 74.148-94.184 44.128l-231.098-145.19c-38.614-24.268-87.782-24.268-126.398 0l-231.096 145.19c-47.764 30.02-90.766 12.076-94.186-44.128C119.082 809.096 116 710.88 116 551.32c0-172.6 6.916-288.05 12.37-352.198z" fill="#FF934A" ></path><path d="M327.648 411.852c-24.922 0.886-42.898 20.49-42.898 45.43v9.512c0 23.316 15.95 41.442 39.244 42.464 31.732 1.392 88.43 2.742 189.006 2.742s157.274-1.35 189.006-2.74c23.294-1.024 39.244-19.15 39.244-42.466v-16.23c0-21.788-14.3-38.658-36.056-39.828-31.068-1.67-88.158-3.12-192.194-2.2-96.824 0.854-152.986 2.162-185.352 3.316z" fill="#FFFFFF" ></path></symbol><symbol id="icon-tiaojie" viewBox="0 0 1024 1024"><path d="M98 284.75C98 176.16 178.594 106.806 287.094 102.172 343.866 99.748 417.8 98 513 98c95.2 0 169.134 1.748 225.906 4.172C847.406 106.806 928 176.16 928 284.75s-80.592 177.944-189.094 182.578c-56.772 2.424-130.704 4.172-225.906 4.172-95.2 0-169.134-1.748-225.906-4.172C178.594 462.694 98 393.34 98 284.75z" fill="#1677FF" ></path><path d="M741.25 284.75m-103.75 0a103.75 103.75 0 1 0 207.5 0 103.75 103.75 0 1 0-207.5 0Z" fill="#FFFFFF" ></path><path d="M928 741.25c0-108.59-80.592-177.944-189.094-182.578-56.772-2.424-130.704-4.172-225.906-4.172-95.2 0-169.134 1.748-225.906 4.172C178.594 563.306 98 632.66 98 741.25s80.594 177.944 189.094 182.578C343.866 926.252 417.8 928 513 928c95.2 0 169.134-1.748 225.906-4.172C847.406 919.194 928 849.84 928 741.25z" fill="#A871FF" ></path><path d="MNaNNaNmNaNNaNaNaNNaNNaN 1 0NaNNaNNaNNaNNaN 1 0NaNNaNZ" fill="#FFFFFF" ></path></symbol><symbol id="icon-dianzan" viewBox="0 0 1024 1024"><path d="M494.752 98.18c17.21 1.438 37.44 4.19 56.94 9.374 41.794 11.094 63.564 52.634 66.188 95.976 3.302 54.598 1.302 110.046-1.42 151.02 64.928-5.83 129.334-10.446 187.308-13.22 61.21-2.914 112.412 43.444 113.66 104.966 2.052 101.32-4.356 255.56-50.726 380.504-18.204 49.052-66.446 78-118.538 79.7-243.788 7.956-478.212-24.514-478.212-24.514V398.8c27.216-5.12 58.76-10.242 93.216-15.222 30.82-86.442 59.966-187.66 75.51-243.778 7.082-25.548 29.748-43.828 56.074-41.62z" fill="#FF934A" ></path><path d="M110.888 873.34c0.544 21.38 12.596 40.814 33.254 46.36 16.32 4.392 38.368 8.3 65.078 8.3s48.758-3.908 65.078-8.3c20.656-5.546 32.71-24.98 33.252-46.36a9323.62 9323.62 0 0 0 2.89-228.756c0-98.426-1.748-183.592-2.89-228.756-0.54-21.378-12.596-40.812-33.252-46.36-16.32-4.392-38.368-8.3-65.08-8.3-26.708 0-48.756 3.908-65.076 8.3-20.658 5.548-32.71 24.982-33.254 46.36A9323.614 9323.614 0 0 0 108 644.584c0 98.426 1.748 183.594 2.888 228.758z" fill="#1677FF" ></path></symbol><symbol id="icon-fenxiang" viewBox="0 0 1024 1024"><path d="M825.238 227.37c15.808 31.616 3.008 70.06-28.608 85.868L416 511.994l380.63 198.756c31.616 15.808 44.416 54.25 28.608 85.864-15.808 31.616-54.252 44.43-85.868 28.624l-533.332-256a64.008 64.008 0 0 1 0-114.488l533.332-256c31.616-15.808 70.06-2.994 85.868 28.62z" fill="#53B5FF" ></path><path d="M448 512c0 106.04-85.952 192-192 192s-192-85.96-192-192 85.952-192 192-192 192 85.96 192 192zM960 256c0 106.04-85.952 192-192 192s-192-85.96-192-192 85.952-192 192-192 192 85.96 192 192zM960 768c0 106.04-85.952 192-192 192s-192-85.96-192-192 85.952-192 192-192 192 85.96 192 192z" fill="#FCDA6E" ></path></symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M512 64C264.576 64 64 264.576 64 512s200.576 448 448 448 448-200.576 448-448S759.424 64 512 64z" fill="#FF934A" ></path><path d="M498.56 519.666a10.668 10.668 0 0 1 0-15.332c21.718-21.126 84.97-82.904 148.374-147.128 14.336-14.516 19.86-35.152 7.744-51.408-4.972-6.654-11.584-14.192-20.352-22.284-11.926-11.014-23.296-18.38-32.768-23.28-15.51-8.02-33.686-3.928-47.766 6.24-110.25 79.572-185.43 165.484-221.802 211.612-15.98 20.29-15.98 47.538 0 67.828 36.372 46.128 111.552 132.04 221.802 211.614 14.08 10.166 32.256 14.256 47.766 6.238 9.472-4.9 20.842-12.266 32.768-23.28 8.768-8.092 15.38-15.63 20.352-22.284 12.116-16.256 6.592-36.892-7.744-51.406-63.404-64.226-126.656-126.004-148.374-147.13z" fill="#FFFFFF" ></path></symbol><symbol id="icon-huaban" viewBox="0 0 1024 1024"><path d="M830.956 608.546c79.044-0.892 137.34-66.22 128.07-144.53C933.256 246.326 745.058 64 513.13 64 265.074 64 64 264.578 64 512c0 247.432 201.074 448 449.13 448 67.2 0 117.16-13.732 126.92-53.566 9.78-39.852-3.526-50.564-48.812-160.694-23.16-56.294 2.006-108.13 39.054-126.61 37.048-18.48 120.98-9.686 200.664-10.584z" fill="#FCBF28" ></path><path d="M570.434 317.218m-97.392 0a97.392 97.392 0 1 0 194.784 0 97.392 97.392 0 1 0-194.784 0Z" fill="#FF6363" ></path><path d="M317.218 453.566m-97.392 0a97.392 97.392 0 1 0 194.784 0 97.392 97.392 0 1 0-194.784 0Z" fill="#FFFFFF" ></path><path d="M395.13 726.26m-77.914 0a77.914 77.914 0 1 0 155.828 0 77.914 77.914 0 1 0-155.828 0Z" fill="#0091FF" ></path></symbol><symbol id="icon-jiazai" viewBox="0 0 1024 1024"><path d="M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FCBF28" ></path><path d="M771.656 704.254c-63.656 87.816-164.966 135.53-268.148 133.504-166.044-3.264-306.84-139.13-316.776-306.686C176 349.956 322.15 190.156 503.508 186.26c90.964-1.958 185.35 34.574 248.782 100.036 0.306 0.32 0.612 0.646 0.918 0.97 14.864-9.22 27.612-16.276 38.282-21.66 22.828-11.526 45.574 3.72 46.144 29.416 0.714 31.54-0.488 78.908-8.368 141.336-3.218 25.496-27.186 42.844-52.254 37.822-61.356-12.296-106.42-26.166-135.926-36.856-24.05-8.708-31.198-35.228-13.094-53.356 8.654-8.66 19.65-18.824 33.498-30.406a160.624 160.624 0 0 1-1.284-1.484c-39.2-46.806-85.812-74.81-156.698-72.702-130.898 3.894-234.772 121.146-223.98 251.7 9.632 116.72 108.112 210.332 223.98 213.564 71.172 1.986 141.304-29.198 187.386-87.35 13.908-17.546 32.928-31.252 53.292-22.054a135.776 135.776 0 0 1 12.178 6.304 135.548 135.548 0 0 1 11.506 7.452c18.102 13.128 16.94 37.13 3.786 55.264z" fill="#FFFFFF" ></path></symbol><symbol id="icon-shoucang" viewBox="0 0 1024 1024"><path d="M912.594 565.068c43.926-71.89 58.216-160.956 39.11-243.768-40.812-188.64-266.872-265.724-407.676-139.308-11.134 9.944-21.056 21.41-32.032 32.842-10.976-11.432-20.9-22.898-32.032-32.842C339.16 55.576 113.1 132.66 72.288 321.3c-19.106 82.812-4.816 171.878 39.11 243.768 76.876 126 200.814 224.102 321.728 313.03 46.95 34.518 110.79 34.518 157.762 0 120.892-88.928 244.83-187.032 321.706-313.03z" fill="#FF7B7B" ></path><path d="M933.918 677.37c24.17-39.378 32.032-88.16 21.526-133.52-22.466-103.32-146.786-145.54-224.22-76.3-6.14 5.448-11.604 11.726-17.63 17.99-6.026-6.264-11.492-12.542-17.628-17.99-77.436-69.24-201.756-27.02-224.222 76.3-10.506 45.36-2.644 94.142 21.526 133.52 40.252 65.722 104 117.602 167.416 164.44 31.36 23.184 74.456 23.184 105.816 0 63.414-46.838 127.164-98.72 167.416-164.44z" fill="#FFB0B0" ></path></symbol><symbol id="icon-shounahe" viewBox="0 0 1024 1024"><path d="M119.526 231.254C123.29 192.766 148.58 162.4 186.48 154.726 241.63 143.562 341.87 130.8 512 130.8s270.37 12.76 325.52 23.926c37.9 7.674 63.19 38.04 66.954 76.528 5.152 52.548 10.73 145.74 10.73 302.75s-5.58 250.2-10.73 302.75c-3.764 38.488-29.054 68.854-66.954 76.528-55.15 11.164-155.39 23.926-325.52 23.926s-270.37-12.762-325.52-23.926c-37.9-7.674-63.19-38.04-66.954-76.528-5.152-52.55-10.73-145.74-10.73-302.75s5.58-250.2 10.73-302.75z" fill="#FFB172" ></path><path d="M959.914 263.194c1.59 25.482-19.13 46.808-45.046 46.808H109.132c-25.916 0-46.636-21.326-45.046-46.808 1.86-29.856 3.898-53.604 5.868-72.254 4.032-38.466 29.636-68.91 68.03-76.962C198.598 101.268 312.864 86 512 86c199.138 0 313.4 15.268 374.016 27.978 38.394 8.052 63.998 38.496 68.03 76.962 1.97 18.648 4.008 42.398 5.868 72.254z" fill="#FF934A" ></path><path d="M310.4 469.914c0-23.492 18.098-42.928 41.574-44.066 36.198-1.758 93.274-3.846 160.026-3.846 66.752 0 123.828 2.088 160.026 3.846 23.476 1.14 41.576 20.574 41.576 44.066v16.178c0 23.494-18.1 42.928-41.576 44.066-36.198 1.758-93.274 3.846-160.026 3.846-66.752 0-123.828-2.088-160.026-3.846-23.476-1.14-41.576-20.572-41.576-44.066v-16.178z" fill="#FFFFFF" ></path></symbol><symbol id="icon-shaixuan" viewBox="0 0 1024 1024"><path d="M101.964 482.708c5.746-19.334 26.228-26.474 46.376-27.284 46.002-1.84 151.37-4.674 364.66-4.674 213.29 0 318.658 2.832 364.66 4.674 20.148 0.81 40.63 7.95 46.376 27.284 2.324 7.82 3.964 17.774 3.964 30.292 0 12.52-1.64 22.47-3.964 30.292-5.746 19.334-26.228 26.474-46.376 27.284-46.002 1.84-151.37 4.674-364.66 4.674-213.29 0-318.658-2.832-364.66-4.674-20.148-0.81-40.63-7.95-46.376-27.284C99.64 535.472 98 525.52 98 513c0-12.52 1.64-22.47 3.964-30.292z" fill="#53B5FF" ></path><path d="M367.75 513m-145.25 0a145.25 145.25 0 1 0 290.5 0 145.25 145.25 0 1 0-290.5 0Z" fill="#FF934A" ></path><path d="M924.036 212.958c-5.746-19.334-26.228-26.474-46.376-27.284-46.002-1.84-151.37-4.674-364.66-4.674-213.29 0-318.658 2.832-364.66 4.674-20.148 0.81-40.63 7.95-46.376 27.284C99.64 220.778 98 230.732 98 243.25c0 12.52 1.64 22.47 3.964 30.292 5.746 19.334 26.228 26.474 46.376 27.284 46.002 1.84 151.37 4.674 364.66 4.674 213.29 0 318.658-2.832 364.66-4.674 20.148-0.81 40.63-7.95 46.376-27.284 2.324-7.82 3.964-17.774 3.964-30.292 0-12.52-1.64-22.47-3.964-30.292z" fill="#53B5FF" ></path><path d="MNaNNaNmNaNNaNaNaNNaNNaN 1 0NaNNaNNaNNaNNaN 1 0NaNNaNZ" fill="#FFDA8F" ></path><path d="M924.036 752.458c-5.746-19.334-26.228-26.474-46.376-27.284-46.002-1.84-151.37-4.674-364.66-4.674-213.29 0-318.658 2.832-364.66 4.674-20.148 0.81-40.63 7.95-46.376 27.284C99.64 760.278 98 770.232 98 782.75c0 12.52 1.64 22.47 3.964 30.292 5.746 19.334 26.228 26.474 46.376 27.284 46.002 1.84 151.37 4.674 364.66 4.674 213.29 0 318.658-2.832 364.66-4.674 20.148-0.81 40.63-7.95 46.376-27.284 2.324-7.82 3.964-17.774 3.964-30.292 0-12.52-1.64-22.47-3.964-30.292z" fill="#53B5FF" ></path><path d="MNaNNaNmNaNNaNaNaNNaNNaN 1 0NaNNaNNaNNaNNaN 1 0NaNNaNZ" fill="#FFDA8F" ></path></symbol><symbol id="icon-shouye" viewBox="0 0 1024 1024"><path d="M513 928c153.32 0 254.624-5.79 316.106-11.268 47.932-4.254 84.888-39.528 89.972-87.478 4.648-44.044 8.922-107.522 8.922-192.374 0-128.992-9.856-208.59-15.978-245.606-2.718-16.406-9.69-31.648-20.626-44.16-71.92-82.304-242.234-215.484-358.186-246.454a78.12 78.12 0 0 0-40.42 0C376.838 131.63 206.52 264.81 134.6 347.116c-10.934 12.51-17.906 27.752-20.624 44.158C107.858 428.29 98 507.888 98 636.88c0 84.852 4.274 148.33 8.922 192.374 5.084 47.95 42.04 83.224 89.972 87.48C258.376 922.208 359.68 928 513 928z" fill="#1677FF" ></path><path d="M305.5 762c0-20.676 16.144-37.684 36.81-38.438 36.79-1.34 98.19-3.062 170.69-3.062s133.9 1.724 170.69 3.062c20.666 0.754 36.81 17.762 36.81 38.438 0 20.674-16.144 37.684-36.81 38.436-36.79 1.34-98.19 3.064-170.69 3.064s-133.9-1.724-170.69-3.064c-20.666-0.752-36.81-17.76-36.81-38.436z" fill="#FFFFFF" ></path></symbol><symbol id="icon-xingxing" viewBox="0 0 1024 1024"><path d="M453.132 111.504c25.334-47.34 92.4-47.34 117.736 0L680.2 315.716l225.168 42.956c51.968 9.916 72.62 74.098 36.4 113.14l-157.608 169.836 29.456 231.306c6.788 53.312-47.4 93.072-95.29 69.91L512 843.094l-206.328 99.77c-47.892 23.162-102.078-16.6-95.29-69.91l29.456-231.306-157.608-169.838c-36.22-39.042-15.568-103.22 36.4-113.14L343.8 315.718l109.334-204.212z" fill="#FF934A" ></path><path d="M719.336 447.1c16.42-31.864 61.712-31.864 78.132 0l40.23 78.044 86.756 17.184c33.512 6.642 47.064 47.512 24.216 73.074l-61.96 69.336 11.268 91.872c4.3 35.056-31.92 60.84-63.348 45.046l-76.228-38.28-76.228 38.28c-31.428 15.792-67.648-9.99-63.348-45.046l11.268-91.872-61.96-69.336c-22.848-25.562-9.296-66.432 24.216-73.074l86.756-17.184 40.23-78.042z" fill="#FCDA6E" ></path></symbol><symbol id="icon-rili" viewBox="0 0 1024 1024"><path d="M108.956 274.908c3.9-36.176 28.406-64.07 64.14-70.842C228.744 193.52 332.764 181 513 181s284.254 12.522 339.906 23.066c35.732 6.772 60.238 34.666 64.138 70.842C922.314 323.74 928 409.904 928 554.5c0 144.596-5.686 230.762-10.956 279.592-3.9 36.176-28.406 64.07-64.14 70.842C797.256 915.48 693.236 928 513 928s-284.254-12.522-339.906-23.066c-35.732-6.772-60.236-34.666-64.138-70.842C103.686 785.26 98 699.096 98 554.5c0-144.596 5.686-230.762 10.956-279.592z" fill="#FCBF28" ></path><path d="M758.472 99.296c12.97 1.072 21.892 10.572 22.764 23.56 0.808 11.928 1.514 30.306 1.514 58.144 0 4.472-0.02 8.7-0.062 12.696 29.112 3.336 52.186 6.956 70.198 10.37 35.752 6.772 60.258 34.666 64.158 70.842 1.992 18.37 4.026 42.028 5.81 72.092H103.146c1.784-30.064 3.818-53.72 5.79-72.092 3.92-36.176 28.406-64.07 64.16-70.842 18.01-3.414 41.104-7.034 70.216-10.372-0.04-3.994-0.062-8.222-0.062-12.694 0-27.84 0.706-46.216 1.514-58.146 0.872-12.986 9.794-22.486 22.764-23.558 8.82-0.728 21.124-1.296 37.972-1.296 16.848 0 29.154 0.568 37.972 1.296 12.97 1.072 21.892 10.572 22.764 23.56 0.808 11.928 1.514 30.306 1.514 58.144v3.12c41.77-1.94 89.91-3.12 145.25-3.12 55.32 0 103.48 1.18 145.25 3.12V181c0-27.84 0.706-46.216 1.514-58.146 0.872-12.986 9.794-22.486 22.764-23.558 8.82-0.728 21.122-1.296 37.972-1.296s29.154 0.568 37.972 1.296z" fill="#FF934A" ></path><path d="M244.184 496.38c0.726-11.918 8.486-21.15 20.314-22.692 9.15-1.194 22.348-2.188 41.002-2.188 18.654 0 31.852 0.994 41.002 2.188 11.828 1.542 19.588 10.774 20.314 22.694 0.52 8.524 0.934 20.584 0.934 37.368 0 16.784-0.416 28.844-0.934 37.368-0.726 11.92-8.486 21.152-20.314 22.694-9.15 1.194-22.348 2.188-41.002 2.188-18.654 0-31.852-0.994-41.002-2.188-11.828-1.542-19.588-10.774-20.314-22.694-0.52-8.524-0.934-20.584-0.934-37.368 0-16.784 0.414-28.844 0.934-37.368z m0 207.5c0.726-11.918 8.486-21.15 20.314-22.692 9.15-1.194 22.348-2.188 41.002-2.188 18.654 0 31.852 0.994 41.002 2.188 11.828 1.542 19.588 10.774 20.314 22.694 0.52 8.524 0.934 20.584 0.934 37.368 0 16.784-0.416 28.844-0.934 37.368-0.726 11.92-8.486 21.152-20.314 22.694-9.15 1.194-22.348 2.188-41.002 2.188-18.654 0-31.852-0.994-41.002-2.188-11.828-1.542-19.588-10.774-20.314-22.694-0.52-8.524-0.934-20.584-0.934-37.368 0-16.784 0.414-28.844 0.934-37.368z m227.814-230.192c-11.828 1.542-19.588 10.774-20.314 22.694-0.52 8.524-0.934 20.584-0.934 37.368 0 16.784 0.416 28.844 0.934 37.368 0.726 11.92 8.486 21.152 20.314 22.694 9.15 1.194 22.348 2.188 41.002 2.188 18.654 0 31.852-0.994 41.002-2.188 11.828-1.542 19.588-10.774 20.314-22.694 0.52-8.524 0.934-20.584 0.934-37.368 0-16.784-0.416-28.844-0.934-37.368-0.726-11.92-8.486-21.152-20.314-22.694-9.15-1.194-22.348-2.188-41.002-2.188-18.654 0-31.852 0.994-41.002 2.188zM451.684 703.88c0.726-11.92 8.486-21.152 20.314-22.694 9.15-1.194 22.348-2.188 41.002-2.188 18.654 0 31.852 0.994 41.002 2.188 11.828 1.542 19.588 10.774 20.314 22.694 0.52 8.524 0.934 20.584 0.934 37.368 0 16.784-0.416 28.844-0.934 37.368-0.726 11.92-8.486 21.152-20.314 22.694-9.15 1.194-22.348 2.188-41.002 2.188-18.654 0-31.852-0.994-41.002-2.188-11.828-1.542-19.588-10.774-20.314-22.694-0.52-8.524-0.934-20.584-0.934-37.368 0-16.784 0.416-28.844 0.934-37.368z m227.814-230.194c-11.828 1.542-19.588 10.774-20.314 22.694-0.52 8.524-0.934 20.584-0.934 37.368 0 16.784 0.414 28.844 0.934 37.368 0.726 11.92 8.486 21.152 20.314 22.694 9.15 1.194 22.348 2.188 41.002 2.188 18.654 0 31.852-0.994 41.002-2.188 11.828-1.542 19.588-10.774 20.314-22.694 0.52-8.524 0.934-20.584 0.934-37.368 0-16.784-0.414-28.844-0.934-37.368-0.726-11.92-8.486-21.152-20.314-22.694-9.15-1.194-22.348-2.188-41.002-2.188-18.654 0-31.852 0.994-41.002 2.188z" fill="#FFFFFF" ></path></symbol><symbol id="icon-taiyang" viewBox="0 0 1024 1024"><path d="M512 512m-224 0a224 224 0 1 0 448 0 224 224 0 1 0-448 0Z" fill="#FF934A" ></path><path d="M445.292 120.692C446.188 89.596 466.326 65.112 497.42 64.204 501.898 64.074 506.758 64 512 64c5.24 0 10.102 0.074 14.582 0.204 31.092 0.908 51.23 25.392 52.126 56.488 0.29 9.912 0.492 20.982 0.492 32.908 0 11.926-0.2 22.996-0.492 32.908-0.896 31.096-21.034 55.58-52.126 56.488-4.48 0.13-9.34 0.204-14.582 0.204-5.24 0-10.102-0.074-14.582-0.204-31.092-0.908-51.23-25.392-52.126-56.488A1121.37 1121.37 0 0 1 444.8 153.6c0-11.926 0.2-22.996 0.492-32.908zM445.292 903.308c0.896 31.096 21.034 55.58 52.126 56.488 4.48 0.13 9.34 0.204 14.582 0.204 5.24 0 10.102-0.074 14.582-0.204 31.092-0.908 51.23-25.392 52.126-56.488 0.29-9.912 0.492-20.982 0.492-32.908 0-11.926-0.2-22.996-0.492-32.908-0.896-31.096-21.034-55.58-52.126-56.488-4.48-0.13-9.34-0.204-14.582-0.204-5.24 0-10.102 0.074-14.582 0.204-31.092 0.908-51.23 25.392-52.126 56.488a1121.37 1121.37 0 0 0-0.492 32.908c0 11.926 0.2 22.996 0.492 32.908zM120.694 578.716C89.604 577.8 65.12 557.676 64.202 526.58 64.068 522.102 64 517.25 64 512s0.068-10.102 0.2-14.58c0.92-31.096 25.404-51.22 56.494-52.136a1122.992 1122.992 0 0 1 65.812 0c31.09 0.916 55.574 21.04 56.492 52.136 0.134 4.478 0.202 9.33 0.202 14.58s-0.068 10.102-0.2 14.58c-0.92 31.096-25.404 51.22-56.494 52.136a1122.992 1122.992 0 0 1-65.812 0zM903.306 578.716c31.09-0.916 55.574-21.04 56.492-52.136 0.134-4.478 0.202-9.33 0.202-14.58s-0.068-10.102-0.2-14.58c-0.92-31.096-25.404-51.22-56.494-52.136a1122.992 1122.992 0 0 0-65.812 0c-31.09 0.916-55.574 21.04-56.492 52.136-0.134 4.478-0.202 9.33-0.202 14.58s0.068 10.102 0.2 14.58c0.92 31.096 25.404 51.22 56.494 52.136a1122.992 1122.992 0 0 0 65.812 0zM188.12 282.48C166.792 259.842 163.7 228.3 185.048 205.67a471.58 471.58 0 0 1 10.17-10.456 486.64 486.64 0 0 1 10.46-10.166c22.624-21.346 54.164-18.264 76.788 3.078a1104.74 1104.74 0 0 1 23.632 22.928 1160.744 1160.744 0 0 1 22.914 23.612c21.348 22.636 24.44 54.18 3.092 76.808a599.97 599.97 0 0 1-10.17 10.454 486.64 486.64 0 0 1-10.46 10.166c-22.624 21.346-54.164 18.264-76.81-3.078a1106.878 1106.878 0 0 1-23.61-22.928 1171.416 1171.416 0 0 1-22.938-23.612zM741.532 835.872c22.624 21.34 54.164 24.424 76.788 3.08a486.64 486.64 0 0 0 10.46-10.168 471.58 471.58 0 0 0 10.17-10.456c21.348-22.628 18.256-54.172-3.068-76.806a1171.416 1171.416 0 0 0-22.938-23.612 1106.878 1106.878 0 0 0-23.61-22.928c-22.646-21.34-54.186-24.424-76.81-3.08a486.64 486.64 0 0 0-10.46 10.168 599.97 599.97 0 0 0-10.17 10.454c-21.346 22.63-18.256 54.172 3.092 76.808a1160.744 1160.744 0 0 0 22.914 23.612 1104.74 1104.74 0 0 0 23.632 22.928zM282.468 835.872c-22.624 21.34-54.164 24.424-76.788 3.08a486.64 486.64 0 0 1-10.46-10.168 471.58 471.58 0 0 1-10.17-10.456c-21.348-22.628-18.256-54.172 3.068-76.806a1171.416 1171.416 0 0 1 22.938-23.612 1106.878 1106.878 0 0 1 23.61-22.928c22.646-21.34 54.186-24.424 76.81-3.08a486.64 486.64 0 0 1 10.46 10.168 599.97 599.97 0 0 1 10.17 10.454c21.346 22.63 18.256 54.172-3.092 76.808a1160.744 1160.744 0 0 1-22.914 23.612 1104.74 1104.74 0 0 1-23.632 22.928zM835.88 282.48c21.326-22.636 24.418-54.18 3.07-76.808a471.58 471.58 0 0 0-10.17-10.456 486.64 486.64 0 0 0-10.46-10.166c-22.624-21.346-54.164-18.264-76.788 3.078a1104.74 1104.74 0 0 0-23.632 22.928 1160.744 1160.744 0 0 0-22.914 23.612c-21.348 22.636-24.44 54.18-3.092 76.808a599.97 599.97 0 0 0 10.17 10.454 486.64 486.64 0 0 0 10.46 10.166c22.624 21.346 54.164 18.264 76.81-3.078a1106.878 1106.878 0 0 0 23.61-22.928 1171.416 1171.416 0 0 0 22.938-23.612z" fill="#FCBF28" ></path></symbol><symbol id="icon-zhankai" viewBox="0 0 1024 1024"><path d="M64 512c0 247.424 200.576 448 448 448s448-200.576 448-448S759.424 64 512 64 64 264.576 64 512z" fill="#FF934A" ></path><path d="M519.66 525.44a10.654 10.654 0 0 1-15.32 0c-21.14-21.718-82.92-84.97-147.134-148.374-14.508-14.336-35.158-19.86-51.414-7.744-6.656 4.972-14.186 11.584-22.272 20.352-11.03 11.926-18.39 23.296-23.274 32.768-8.022 15.51-3.948 33.686 6.228 47.766 79.574 110.25 165.484 185.43 211.606 221.802 20.288 15.98 47.552 15.98 67.84 0 46.122-36.372 132.032-111.552 211.606-221.802 10.176-14.08 14.25-32.256 6.228-47.766-4.884-9.472-12.244-20.842-23.274-32.768-8.086-8.768-15.616-15.38-22.272-20.352-16.256-12.116-36.906-6.592-51.414 7.744-64.212 63.404-125.994 126.656-147.136 148.374z" fill="#FFFFFF" ></path></symbol></svg>',function(c){var l=(l=document.getElementsByTagName("script"))[l.length-1],a=l.getAttribute("data-injectcss"),l=l.getAttribute("data-disable-injectsvg");if(!l){var h,t,i,p,z,F=function(l,a){a.parentNode.insertBefore(l,a)};if(a&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(l){console&&console.log(l)}}h=function(){var l,a=document.createElement("div");a.innerHTML=c._iconfont_svg_string_3611233,(a=a.getElementsByTagName("svg")[0])&&(a.setAttribute("aria-hidden","true"),a.style.position="absolute",a.style.width=0,a.style.height=0,a.style.overflow="hidden",a=a,(l=document.body).firstChild?F(a,l.firstChild):l.appendChild(a))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(h,0):(t=function(){document.removeEventListener("DOMContentLoaded",t,!1),h()},document.addEventListener("DOMContentLoaded",t,!1)):document.attachEvent&&(i=h,p=c.document,z=!1,m(),p.onreadystatechange=function(){"complete"==p.readyState&&(p.onreadystatechange=null,d())})}function d(){z||(z=!0,i())}function m(){try{p.documentElement.doScroll("left")}catch(l){return void setTimeout(m,50)}d()}}(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var grt = new Date("01/03/2023 00:00:00");  now.setTime(now.getTime() + 250);  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9      ? `<span class='textTip'> 此即，诞生之刻！本站已运行 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fa fa-circle-o-notch' style='color:blue'></i>`      : `<span class='textTip'> 此即，诞生之刻！本站已运行 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fa fa-circle-o-notch' style='color:blue'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var grt=new Date("01/03/2023 00:00:00");now.setTime(now.getTime()+250);var days=(now-grt)/1e3/60/60/24,dnum=Math.floor(days),hours=(now-grt)/1e3/60/60-24*dnum,hnum=Math.floor(hours);1==String(hnum).length&&(hnum="0"+hnum);var minutes=(now-grt)/1e3/60-1440*dnum-60*hnum,mnum=Math.floor(minutes);1==String(mnum).length&&(mnum="0"+mnum);var seconds=(now-grt)/1e3-86400*dnum-3600*hnum-60*mnum,snum=Math.round(seconds);1==String(snum).length&&(snum="0"+snum);let currentTimeHtml="";currentTimeHtml=`<span class='textTip'> 此即，诞生之刻！本站已运行 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fa fa-circle-o-notch' style='color:blue'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=currentTimeHtml)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
